// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

#include "steamnetworkingsockets_messages_udp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
class CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ChallengeRequest> _instance;
} _CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;
class CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ChallengeReply> _instance;
} _CMsgSteamSockets_UDP_ChallengeReply_default_instance_;
class CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectRequest> _instance;
} _CMsgSteamSockets_UDP_ConnectRequest_default_instance_;
class CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectOK> _instance;
} _CMsgSteamSockets_UDP_ConnectOK_default_instance_;
class CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_ConnectionClosed> _instance;
} _CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;
class CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_NoConnection> _instance;
} _CMsgSteamSockets_UDP_NoConnection_default_instance_;
class CMsgSteamSockets_UDP_StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamSockets_UDP_Stats> _instance;
} _CMsgSteamSockets_UDP_Stats_default_instance_;
static void InitDefaultsscc_info_CMsgSteamSockets_UDP_ChallengeReply_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ChallengeReply_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ChallengeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ChallengeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ChallengeReply_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_ChallengeReply_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_ChallengeRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ChallengeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ChallengeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ChallengeRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_ChallengeRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectOK_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectOK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectOK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
      &scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
      &scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_ConnectionClosed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_ConnectionClosed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_NoConnection_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_NoConnection_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_NoConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_NoConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamSockets_UDP_NoConnection_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_NoConnection_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamSockets_UDP_Stats_default_instance_;
    new (ptr) ::CMsgSteamSockets_UDP_Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamSockets_UDP_Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fudp_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steamnetworkingsockets_5fmessages_5fudp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, my_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, protocol_version_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, your_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, protocol_version_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, challenge_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, my_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, ping_est_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, legacy_protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, legacy_client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, legacy_identity_binary_),
  6,
  4,
  8,
  7,
  2,
  1,
  9,
  0,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, your_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, delay_time_usec_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, legacy_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, legacy_identity_binary_),
  5,
  8,
  7,
  6,
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, debug_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, reason_code_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, to_connection_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, flags_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgSteamSockets_UDP_ChallengeRequest)},
  { 11, 20, sizeof(::CMsgSteamSockets_UDP_ChallengeReply)},
  { 24, 39, sizeof(::CMsgSteamSockets_UDP_ConnectRequest)},
  { 49, 63, sizeof(::CMsgSteamSockets_UDP_ConnectOK)},
  { 72, 81, sizeof(::CMsgSteamSockets_UDP_ConnectionClosed)},
  { 85, 92, sizeof(::CMsgSteamSockets_UDP_NoConnection)},
  { 94, 101, sizeof(::CMsgSteamSockets_UDP_Stats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_ChallengeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_ConnectOK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_NoConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamSockets_UDP_Stats_default_instance_),
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fudp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steamnetworkingsockets_messages_udp.pr"
  "oto\032+steamnetworkingsockets_messages_cer"
  "ts.proto\032%steamnetworkingsockets_message"
  "s.proto\"n\n%CMsgSteamSockets_UDP_Challeng"
  "eRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_ti"
  "mestamp\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\""
  "\201\001\n#CMsgSteamSockets_UDP_ChallengeReply\022"
  "\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001("
  "\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020protocol_ve"
  "rsion\030\004 \001(\r\"\221\003\n#CMsgSteamSockets_UDP_Con"
  "nectRequest\022\034\n\024client_connection_id\030\001 \001("
  "\007\022\021\n\tchallenge\030\002 \001(\006\022\024\n\014my_timestamp\030\005 \001"
  "(\006\022\023\n\013ping_est_ms\030\006 \001(\r\0227\n\005crypt\030\007 \001(\0132("
  ".CMsgSteamDatagramSessionCryptInfoSigned"
  "\0221\n\004cert\030\004 \001(\0132#.CMsgSteamDatagramCertif"
  "icateSigned\022\037\n\027legacy_protocol_version\030\010"
  " \001(\r\022\027\n\017identity_string\030\n \001(\t\022\036\n\026legacy_"
  "client_steam_id\030\003 \001(\006\022H\n\026legacy_identity"
  "_binary\030\t \001(\0132(.CMsgSteamNetworkingIdent"
  "ityLegacyBinary\"\374\002\n\036CMsgSteamSockets_UDP"
  "_ConnectOK\022\034\n\024client_connection_id\030\001 \001(\007"
  "\022\034\n\024server_connection_id\030\005 \001(\007\022\026\n\016your_t"
  "imestamp\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\022"
  "7\n\005crypt\030\007 \001(\0132(.CMsgSteamDatagramSessio"
  "nCryptInfoSigned\0221\n\004cert\030\010 \001(\0132#.CMsgSte"
  "amDatagramCertificateSigned\022\027\n\017identity_"
  "string\030\013 \001(\t\022\036\n\026legacy_server_steam_id\030\002"
  " \001(\006\022H\n\026legacy_identity_binary\030\n \001(\0132(.C"
  "MsgSteamNetworkingIdentityLegacyBinary\"\201"
  "\001\n%CMsgSteamSockets_UDP_ConnectionClosed"
  "\022\030\n\020to_connection_id\030\004 \001(\007\022\032\n\022from_conne"
  "ction_id\030\005 \001(\007\022\r\n\005debug\030\002 \001(\t\022\023\n\013reason_"
  "code\030\003 \001(\r\"Y\n!CMsgSteamSockets_UDP_NoCon"
  "nection\022\032\n\022from_connection_id\030\002 \001(\007\022\030\n\020t"
  "o_connection_id\030\003 \001(\007\"\267\001\n\032CMsgSteamSocke"
  "ts_UDP_Stats\0222\n\005stats\030\001 \001(\0132#.CMsgSteamD"
  "atagramConnectionQuality\022\r\n\005flags\030\003 \001(\r\""
  "V\n\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQ"
  "UEST_IMMEDIATE\020\004\022\035\n\031NOT_PRIMARY_TRANSPOR"
  "T_E2E\020\020*\245\002\n\030ESteamNetworkingUDPMsgID\022-\n)"
  "k_ESteamNetworkingUDPMsg_ChallengeReques"
  "t\020 \022+\n\'k_ESteamNetworkingUDPMsg_Challeng"
  "eReply\020!\022+\n\'k_ESteamNetworkingUDPMsg_Con"
  "nectRequest\020\"\022&\n\"k_ESteamNetworkingUDPMs"
  "g_ConnectOK\020#\022-\n)k_ESteamNetworkingUDPMs"
  "g_ConnectionClosed\020$\022)\n%k_ESteamNetworki"
  "ngUDPMsg_NoConnection\020%B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_deps[2] = {
  &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
  &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_sccs[7] = {
  &scc_info_CMsgSteamSockets_UDP_ChallengeReply_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_ChallengeRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_NoConnection_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
  &scc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto = {
  false, false, descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fudp_2eproto, "steamnetworkingsockets_messages_udp.proto", 1870,
  &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_once, descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_sccs, descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_5fudp_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_5fudp_2eproto, 7, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fudp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[0];
}
bool CMsgSteamSockets_UDP_Stats_Flags_IsValid(int value) {
  switch (value) {
    case 2:
    case 4:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_E2E;
constexpr CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_IMMEDIATE;
constexpr CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::NOT_PRIMARY_TRANSPORT_E2E;
constexpr CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MIN;
constexpr CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MAX;
constexpr int CMsgSteamSockets_UDP_Stats::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[1];
}
bool ESteamNetworkingUDPMsgID_IsValid(int value) {
  switch (value) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamSockets_UDP_ChallengeRequest::InitAsDefaultInstance() {
}
class CMsgSteamSockets_UDP_ChallengeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_ChallengeRequest>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ChallengeRequest)
}
CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(const CMsgSteamSockets_UDP_ChallengeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_timestamp_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ChallengeRequest)
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedCtor() {
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_timestamp_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
}

CMsgSteamSockets_UDP_ChallengeRequest::~CMsgSteamSockets_UDP_ChallengeRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamSockets_UDP_ChallengeRequest::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_ChallengeRequest* _this = reinterpret_cast< CMsgSteamSockets_UDP_ChallengeRequest* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_ChallengeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_ChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_ChallengeRequest& CMsgSteamSockets_UDP_ChallengeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_ChallengeRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_timestamp_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(my_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_ChallengeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 my_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_my_timestamp(&has_bits);
          my_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_ChallengeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional fixed64 my_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_my_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeRequest)
  return target;
}

size_t CMsgSteamSockets_UDP_ChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

    // optional fixed64 my_timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_ChallengeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ChallengeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ChallengeRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      my_timestamp_ = from.my_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeRequest::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ChallengeRequest::InternalSwap(CMsgSteamSockets_UDP_ChallengeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, my_timestamp_)
      + sizeof(CMsgSteamSockets_UDP_ChallengeRequest::my_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, connection_id_)>(
          reinterpret_cast<char*>(&connection_id_),
          reinterpret_cast<char*>(&other->connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_ChallengeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_ChallengeReply::InitAsDefaultInstance() {
}
class CMsgSteamSockets_UDP_ChallengeReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_ChallengeReply>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_your_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ChallengeReply)
}
CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(const CMsgSteamSockets_UDP_ChallengeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&your_timestamp_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ChallengeReply)
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedCtor() {
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&your_timestamp_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
}

CMsgSteamSockets_UDP_ChallengeReply::~CMsgSteamSockets_UDP_ChallengeReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamSockets_UDP_ChallengeReply::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_ChallengeReply* _this = reinterpret_cast< CMsgSteamSockets_UDP_ChallengeReply* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_ChallengeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_ChallengeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_ChallengeReply& CMsgSteamSockets_UDP_ChallengeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_ChallengeReply_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ChallengeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&your_timestamp_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(your_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_ChallengeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_connection_id(&has_bits);
          connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 your_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_your_timestamp(&has_bits);
          your_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_ChallengeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_challenge(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_your_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeReply)
  return target;
}

size_t CMsgSteamSockets_UDP_ChallengeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 challenge = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

    // optional fixed64 your_timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_ChallengeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ChallengeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ChallengeReply)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      your_timestamp_ = from.your_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeReply::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ChallengeReply::InternalSwap(CMsgSteamSockets_UDP_ChallengeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, your_timestamp_)
      + sizeof(CMsgSteamSockets_UDP_ChallengeReply::your_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, challenge_)>(
          reinterpret_cast<char*>(&challenge_),
          reinterpret_cast<char*>(&other->challenge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_ChallengeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectRequest::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance.get_mutable()->legacy_identity_binary_ = const_cast< ::CMsgSteamNetworkingIdentityLegacyBinary*>(
      ::CMsgSteamNetworkingIdentityLegacyBinary::internal_default_instance());
}
class CMsgSteamSockets_UDP_ConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_ConnectRequest>()._has_bits_);
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_my_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ping_est_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamSockets_UDP_ConnectRequest* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamSockets_UDP_ConnectRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary(const CMsgSteamSockets_UDP_ConnectRequest* msg);
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamSockets_UDP_ConnectRequest::_Internal::crypt(const CMsgSteamSockets_UDP_ConnectRequest* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamSockets_UDP_ConnectRequest::_Internal::cert(const CMsgSteamSockets_UDP_ConnectRequest* msg) {
  return *msg->cert_;
}
const ::CMsgSteamNetworkingIdentityLegacyBinary&
CMsgSteamSockets_UDP_ConnectRequest::_Internal::legacy_identity_binary(const CMsgSteamSockets_UDP_ConnectRequest* msg) {
  return *msg->legacy_identity_binary_;
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_legacy_identity_binary() {
  if (legacy_identity_binary_ != nullptr) legacy_identity_binary_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectRequest)
}
CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(const CMsgSteamSockets_UDP_ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identity_string()) {
    identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identity_string(),
      GetArena());
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_legacy_identity_binary()) {
    legacy_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from.legacy_identity_binary_);
  } else {
    legacy_identity_binary_ = nullptr;
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_protocol_version_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(legacy_protocol_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectRequest)
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legacy_protocol_version_) -
      reinterpret_cast<char*>(&cert_)) + sizeof(legacy_protocol_version_));
}

CMsgSteamSockets_UDP_ConnectRequest::~CMsgSteamSockets_UDP_ConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete legacy_identity_binary_;
}

void CMsgSteamSockets_UDP_ConnectRequest::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_ConnectRequest* _this = reinterpret_cast< CMsgSteamSockets_UDP_ConnectRequest* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_ConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_ConnectRequest& CMsgSteamSockets_UDP_ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_ConnectRequest_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(legacy_identity_binary_ != nullptr);
      legacy_identity_binary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_est_ms_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(ping_est_ms_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&my_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_protocol_version_) -
        reinterpret_cast<char*>(&my_timestamp_)) + sizeof(legacy_protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 challenge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_client_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_legacy_client_steam_id(&has_bits);
          legacy_client_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 my_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_my_timestamp(&has_bits);
          my_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_est_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ping_est_ms(&has_bits);
          ping_est_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 legacy_protocol_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_legacy_protocol_version(&has_bits);
          legacy_protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_identity_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identity_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamSockets_UDP_ConnectRequest.identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_ConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_client_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_challenge(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_legacy_client_steam_id(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cert(this), target, stream);
  }

  // optional fixed64 my_timestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::crypt(this), target, stream);
  }

  // optional uint32 legacy_protocol_version = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_legacy_protocol_version(), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::legacy_identity_binary(this), target, stream);
  }

  // optional string identity_string = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_string().data(), static_cast<int>(this->_internal_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamSockets_UDP_ConnectRequest.identity_string");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_identity_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectRequest)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identity_string = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_string());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_identity_binary_);
    }

    // optional fixed64 challenge = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_client_steam_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 ping_est_ms = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_est_ms());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed64 my_timestamp = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_protocol_version = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_legacy_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_client_steam_id_ = from.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      ping_est_ms_ = from.ping_est_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      my_timestamp_ = from.my_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      legacy_protocol_version_ = from.legacy_protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectRequest::InternalSwap(CMsgSteamSockets_UDP_ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identity_string_.Swap(&other->identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, legacy_protocol_version_)
      + sizeof(CMsgSteamSockets_UDP_ConnectRequest::legacy_protocol_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, cert_)>(
          reinterpret_cast<char*>(&cert_),
          reinterpret_cast<char*>(&other->cert_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_ConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectOK::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
  ::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance.get_mutable()->legacy_identity_binary_ = const_cast< ::CMsgSteamNetworkingIdentityLegacyBinary*>(
      ::CMsgSteamNetworkingIdentityLegacyBinary::internal_default_instance());
}
class CMsgSteamSockets_UDP_ConnectOK::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_ConnectOK>()._has_bits_);
  static void set_has_client_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_your_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_delay_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamSockets_UDP_ConnectOK* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamSockets_UDP_ConnectOK* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary(const CMsgSteamSockets_UDP_ConnectOK* msg);
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamSockets_UDP_ConnectOK::_Internal::crypt(const CMsgSteamSockets_UDP_ConnectOK* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamSockets_UDP_ConnectOK::_Internal::cert(const CMsgSteamSockets_UDP_ConnectOK* msg) {
  return *msg->cert_;
}
const ::CMsgSteamNetworkingIdentityLegacyBinary&
CMsgSteamSockets_UDP_ConnectOK::_Internal::legacy_identity_binary(const CMsgSteamSockets_UDP_ConnectOK* msg) {
  return *msg->legacy_identity_binary_;
}
void CMsgSteamSockets_UDP_ConnectOK::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamSockets_UDP_ConnectOK::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamSockets_UDP_ConnectOK::clear_legacy_identity_binary() {
  if (legacy_identity_binary_ != nullptr) legacy_identity_binary_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectOK)
}
CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(const CMsgSteamSockets_UDP_ConnectOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identity_string()) {
    identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identity_string(),
      GetArena());
  }
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  if (from._internal_has_legacy_identity_binary()) {
    legacy_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from.legacy_identity_binary_);
  } else {
    legacy_identity_binary_ = nullptr;
  }
  ::memcpy(&legacy_server_steam_id_, &from.legacy_server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&legacy_server_steam_id_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectOK)
}

void CMsgSteamSockets_UDP_ConnectOK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(server_connection_id_));
}

CMsgSteamSockets_UDP_ConnectOK::~CMsgSteamSockets_UDP_ConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectOK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_ConnectOK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
  if (this != internal_default_instance()) delete legacy_identity_binary_;
}

void CMsgSteamSockets_UDP_ConnectOK::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_ConnectOK* _this = reinterpret_cast< CMsgSteamSockets_UDP_ConnectOK* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_ConnectOK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_ConnectOK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_ConnectOK& CMsgSteamSockets_UDP_ConnectOK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_ConnectOK_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(legacy_identity_binary_ != nullptr);
      legacy_identity_binary_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&legacy_server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&your_timestamp_) -
        reinterpret_cast<char*>(&legacy_server_steam_id_)) + sizeof(your_timestamp_));
  }
  server_connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_ConnectOK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_client_connection_id(&has_bits);
          client_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_legacy_server_steam_id(&has_bits);
          legacy_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 your_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_your_timestamp(&has_bits);
          your_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay_time_usec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delay_time_usec(&has_bits);
          delay_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_server_connection_id(&has_bits);
          server_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_identity_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identity_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamSockets_UDP_ConnectOK.identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_ConnectOK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_client_connection_id(), target);
  }

  // optional fixed64 legacy_server_steam_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_legacy_server_steam_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delay_time_usec(), target);
  }

  // optional fixed32 server_connection_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_server_connection_id(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::crypt(this), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cert(this), target, stream);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::legacy_identity_binary(this), target, stream);
  }

  // optional string identity_string = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_string().data(), static_cast<int>(this->_internal_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamSockets_UDP_ConnectOK.identity_string");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_identity_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectOK)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectOK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identity_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_string());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_identity_binary_);
    }

    // optional fixed64 legacy_server_steam_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 delay_time_usec = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay_time_usec());
    }

    // optional fixed64 your_timestamp = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed32 server_connection_id = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectOK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_ConnectOK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectOK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_server_steam_id_ = from.legacy_server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      delay_time_usec_ = from.delay_time_usec_;
    }
    if (cached_has_bits & 0x00000080u) {
      your_timestamp_ = from.your_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_server_connection_id(from._internal_server_connection_id());
  }
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectOK::InternalSwap(CMsgSteamSockets_UDP_ConnectOK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identity_string_.Swap(&other->identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, server_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_ConnectOK::server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, crypt_)>(
          reinterpret_cast<char*>(&crypt_),
          reinterpret_cast<char*>(&other->crypt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_ConnectOK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_ConnectionClosed::InitAsDefaultInstance() {
}
class CMsgSteamSockets_UDP_ConnectionClosed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_ConnectionClosed>()._has_bits_);
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}
CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(const CMsgSteamSockets_UDP_ConnectionClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug()) {
    debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_debug(),
      GetArena());
  }
  ::memcpy(&reason_code_, &from.reason_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_connection_id_) -
    reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reason_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_connection_id_) -
      reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
}

CMsgSteamSockets_UDP_ConnectionClosed::~CMsgSteamSockets_UDP_ConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectionClosed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  debug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamSockets_UDP_ConnectionClosed::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_ConnectionClosed* _this = reinterpret_cast< CMsgSteamSockets_UDP_ConnectionClosed* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_ConnectionClosed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_ConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_ConnectionClosed& CMsgSteamSockets_UDP_ConnectionClosed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_ConnectionClosed_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_ConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    debug_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&reason_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_connection_id_) -
        reinterpret_cast<char*>(&reason_code_)) + sizeof(from_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_ConnectionClosed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_debug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamSockets_UDP_ConnectionClosed.debug");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reason_code(&has_bits);
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_connection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_to_connection_id(&has_bits);
          to_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_ConnectionClosed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug().data(), static_cast<int>(this->_internal_debug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamSockets_UDP_ConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_debug(), target);
  }

  // optional uint32 reason_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reason_code(), target);
  }

  // optional fixed32 to_connection_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_from_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectionClosed)
  return target;
}

size_t CMsgSteamSockets_UDP_ConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectionClosed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string debug = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug());
    }

    // optional uint32 reason_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason_code());
    }

    // optional fixed32 to_connection_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectionClosed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_ConnectionClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_ConnectionClosed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_ConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_debug(from._internal_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_connection_id_ = from.from_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_ConnectionClosed::InternalSwap(CMsgSteamSockets_UDP_ConnectionClosed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_.Swap(&other->debug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, from_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_ConnectionClosed::from_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, reason_code_)>(
          reinterpret_cast<char*>(&reason_code_),
          reinterpret_cast<char*>(&other->reason_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_ConnectionClosed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_NoConnection::InitAsDefaultInstance() {
}
class CMsgSteamSockets_UDP_NoConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_NoConnection>()._has_bits_);
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_NoConnection)
}
CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(const CMsgSteamSockets_UDP_NoConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_connection_id_, &from.from_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_connection_id_) -
    reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_NoConnection)
}

void CMsgSteamSockets_UDP_NoConnection::SharedCtor() {
  ::memset(&from_connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_connection_id_) -
      reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
}

CMsgSteamSockets_UDP_NoConnection::~CMsgSteamSockets_UDP_NoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_NoConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_NoConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamSockets_UDP_NoConnection::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_NoConnection* _this = reinterpret_cast< CMsgSteamSockets_UDP_NoConnection* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_NoConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_NoConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_NoConnection& CMsgSteamSockets_UDP_NoConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_NoConnection_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_NoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_NoConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&from_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_connection_id_) -
        reinterpret_cast<char*>(&from_connection_id_)) + sizeof(to_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_NoConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 from_connection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 to_connection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_to_connection_id(&has_bits);
          to_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_NoConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_NoConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 from_connection_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_from_connection_id(), target);
  }

  // optional fixed32 to_connection_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_to_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_NoConnection)
  return target;
}

size_t CMsgSteamSockets_UDP_NoConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_NoConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 from_connection_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 to_connection_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_NoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_NoConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_NoConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_NoConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_NoConnection)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_NoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_connection_id_ = from.to_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_NoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_NoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_NoConnection::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_NoConnection::InternalSwap(CMsgSteamSockets_UDP_NoConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, to_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_NoConnection::to_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, from_connection_id_)>(
          reinterpret_cast<char*>(&from_connection_id_),
          reinterpret_cast<char*>(&other->from_connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_NoConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamSockets_UDP_Stats::InitAsDefaultInstance() {
  ::_CMsgSteamSockets_UDP_Stats_default_instance_._instance.get_mutable()->stats_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamSockets_UDP_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamSockets_UDP_Stats>()._has_bits_);
  static const ::CMsgSteamDatagramConnectionQuality& stats(const CMsgSteamSockets_UDP_Stats* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramConnectionQuality&
CMsgSteamSockets_UDP_Stats::_Internal::stats(const CMsgSteamSockets_UDP_Stats* msg) {
  return *msg->stats_;
}
void CMsgSteamSockets_UDP_Stats::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_Stats)
}
CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(const CMsgSteamSockets_UDP_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::CMsgSteamDatagramConnectionQuality(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_Stats)
}

void CMsgSteamSockets_UDP_Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(flags_));
}

CMsgSteamSockets_UDP_Stats::~CMsgSteamSockets_UDP_Stats() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamSockets_UDP_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
}

void CMsgSteamSockets_UDP_Stats::ArenaDtor(void* object) {
  CMsgSteamSockets_UDP_Stats* _this = reinterpret_cast< CMsgSteamSockets_UDP_Stats* >(object);
  (void)_this;
}
void CMsgSteamSockets_UDP_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamSockets_UDP_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamSockets_UDP_Stats& CMsgSteamSockets_UDP_Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamSockets_UDP_Stats_steamnetworkingsockets_5fmessages_5fudp_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamSockets_UDP_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stats_ != nullptr);
    stats_->Clear();
  }
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamSockets_UDP_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramConnectionQuality stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamSockets_UDP_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stats(this), target, stream);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_Stats)
  return target;
}

size_t CMsgSteamSockets_UDP_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamSockets_UDP_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamSockets_UDP_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamSockets_UDP_Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamSockets_UDP_Stats)
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const CMsgSteamSockets_UDP_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stats()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamSockets_UDP_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const CMsgSteamSockets_UDP_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_Stats::IsInitialized() const {
  return true;
}

void CMsgSteamSockets_UDP_Stats::InternalSwap(CMsgSteamSockets_UDP_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, flags_)
      + sizeof(CMsgSteamSockets_UDP_Stats::flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamSockets_UDP_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_ChallengeRequest* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ChallengeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_ChallengeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_ChallengeReply* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ChallengeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_ChallengeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_ConnectRequest* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_ConnectOK* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_ConnectOK >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_ConnectionClosed* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_ConnectionClosed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_ConnectionClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_NoConnection* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_NoConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_NoConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamSockets_UDP_Stats* Arena::CreateMaybeMessage< ::CMsgSteamSockets_UDP_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamSockets_UDP_Stats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
