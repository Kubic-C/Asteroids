// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
class CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingIdentityLegacyBinary> _instance;
} _CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;
class CMsgSteamDatagramCertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificate> _instance;
} _CMsgSteamDatagramCertificate_default_instance_;
class CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificateSigned> _instance;
} _CMsgSteamDatagramCertificateSigned_default_instance_;
class CMsgSteamDatagramCertificateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificateRequest> _instance;
} _CMsgSteamDatagramCertificateRequest_default_instance_;
static void InitDefaultsscc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificate_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {
      &scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificateRequest_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {
      &scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificateSigned_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificateSigned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;
    new (ptr) ::CMsgSteamNetworkingIdentityLegacyBinary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingIdentityLegacyBinary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, generic_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, generic_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, ipv6_and_port_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, legacy_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, legacy_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, app_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, ip_addresses_),
  4,
  0,
  3,
  2,
  1,
  ~0u,
  5,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, private_key_data_),
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, cert_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgSteamNetworkingIdentityLegacyBinary)},
  { 13, 28, sizeof(::CMsgSteamDatagramCertificate)},
  { 38, 47, sizeof(::CMsgSteamDatagramCertificateSigned)},
  { 51, 57, sizeof(::CMsgSteamDatagramCertificateRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCertificate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCertificateSigned_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCertificateRequest_default_instance_),
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steamnetworkingsockets_messages_certs."
  "proto\"\201\001\n\'CMsgSteamNetworkingIdentityLeg"
  "acyBinary\022\020\n\010steam_id\030\020 \001(\006\022\025\n\rgeneric_b"
  "ytes\030\002 \001(\014\022\026\n\016generic_string\030\003 \001(\t\022\025\n\rip"
  "v6_and_port\030\004 \001(\014\"\201\003\n\034CMsgSteamDatagramC"
  "ertificate\0228\n\010key_type\030\001 \001(\0162&.CMsgSteam"
  "DatagramCertificate.EKeyType\022\020\n\010key_data"
  "\030\002 \001(\014\022\027\n\017legacy_steam_id\030\004 \001(\006\022H\n\026legac"
  "y_identity_binary\030\013 \001(\0132(.CMsgSteamNetwo"
  "rkingIdentityLegacyBinary\022\027\n\017identity_st"
  "ring\030\014 \001(\t\022!\n\031gameserver_datacenter_ids\030"
  "\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023\n\013time_expi"
  "ry\030\t \001(\007\022\017\n\007app_ids\030\n \003(\r\022\024\n\014ip_addresse"
  "s\030\r \003(\t\"$\n\010EKeyType\022\013\n\007INVALID\020\000\022\013\n\007ED25"
  "519\020\001\"u\n\"CMsgSteamDatagramCertificateSig"
  "ned\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014"
  "ca_signature\030\006 \001(\014\022\030\n\020private_key_data\030\001"
  " \001(\014\"R\n#CMsgSteamDatagramCertificateRequ"
  "est\022+\n\004cert\030\001 \001(\0132\035.CMsgSteamDatagramCer"
  "tificateB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_sccs[4] = {
  &scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
  &scc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
  &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
  &scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
  false, false, descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto, "steamnetworkingsockets_messages_certs.proto", 775,
  &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once, descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_sccs, descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto, 4, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fcerts_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
constexpr int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CMsgSteamNetworkingIdentityLegacyBinary::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingIdentityLegacyBinary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingIdentityLegacyBinary>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_generic_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv6_and_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(const CMsgSteamNetworkingIdentityLegacyBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  generic_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_generic_bytes()) {
    generic_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_generic_bytes(),
      GetArena());
  }
  generic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_generic_string()) {
    generic_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_generic_string(),
      GetArena());
  }
  ipv6_and_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipv6_and_port()) {
    ipv6_and_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipv6_and_port(),
      GetArena());
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}

void CMsgSteamNetworkingIdentityLegacyBinary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  generic_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamNetworkingIdentityLegacyBinary::~CMsgSteamNetworkingIdentityLegacyBinary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentityLegacyBinary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  generic_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generic_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingIdentityLegacyBinary::ArenaDtor(void* object) {
  CMsgSteamNetworkingIdentityLegacyBinary* _this = reinterpret_cast< CMsgSteamNetworkingIdentityLegacyBinary* >(object);
  (void)_this;
}
void CMsgSteamNetworkingIdentityLegacyBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingIdentityLegacyBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamNetworkingIdentityLegacyBinary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingIdentityLegacyBinary_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingIdentityLegacyBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      generic_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      generic_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ipv6_and_port_.ClearNonDefaultToEmpty();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingIdentityLegacyBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes generic_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_generic_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string generic_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_generic_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ipv6_and_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipv6_and_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_generic_string().data(), static_cast<int>(this->_internal_generic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentityLegacyBinary)
  return target;
}

size_t CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentityLegacyBinary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes generic_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generic_bytes());
    }

    // optional string generic_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6_and_port());
    }

    // optional fixed64 steam_id = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingIdentityLegacyBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingIdentityLegacyBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingIdentityLegacyBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingIdentityLegacyBinary)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_generic_bytes(from._internal_generic_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_generic_string(from._internal_generic_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ipv6_and_port(from._internal_ipv6_and_port());
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentityLegacyBinary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIdentityLegacyBinary::InternalSwap(CMsgSteamNetworkingIdentityLegacyBinary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  generic_bytes_.Swap(&other->generic_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  generic_string_.Swap(&other->generic_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipv6_and_port_.Swap(&other->ipv6_and_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingIdentityLegacyBinary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramCertificate_default_instance_._instance.get_mutable()->legacy_identity_binary_ = const_cast< ::CMsgSteamNetworkingIdentityLegacyBinary*>(
      ::CMsgSteamNetworkingIdentityLegacyBinary::internal_default_instance());
}
class CMsgSteamDatagramCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificate>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary(const CMsgSteamDatagramCertificate* msg);
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgSteamNetworkingIdentityLegacyBinary&
CMsgSteamDatagramCertificate::_Internal::legacy_identity_binary(const CMsgSteamDatagramCertificate* msg) {
  return *msg->legacy_identity_binary_;
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gameserver_datacenter_ids_(arena),
  app_ids_(arena),
  ip_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificate)
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gameserver_datacenter_ids_(from.gameserver_datacenter_ids_),
      app_ids_(from.app_ids_),
      ip_addresses_(from.ip_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_data()) {
    key_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_data(),
      GetArena());
  }
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identity_string()) {
    identity_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identity_string(),
      GetArena());
  }
  if (from._internal_has_legacy_identity_binary()) {
    legacy_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from.legacy_identity_binary_);
  } else {
    legacy_identity_binary_ = nullptr;
  }
  ::memcpy(&legacy_steam_id_, &from.legacy_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expiry_) -
    reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&legacy_identity_binary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_expiry_) -
      reinterpret_cast<char*>(&legacy_identity_binary_)) + sizeof(time_expiry_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete legacy_identity_binary_;
}

void CMsgSteamDatagramCertificate::ArenaDtor(void* object) {
  CMsgSteamDatagramCertificate* _this = reinterpret_cast< CMsgSteamDatagramCertificate* >(object);
  (void)_this;
}
void CMsgSteamDatagramCertificate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserver_datacenter_ids_.Clear();
  app_ids_.Clear();
  ip_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(legacy_identity_binary_ != nullptr);
      legacy_identity_binary_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&legacy_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expiry_) -
        reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramCertificate_EKeyType_IsValid(val))) {
            _internal_set_key_type(static_cast<::CMsgSteamDatagramCertificate_EKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes key_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_legacy_steam_id(&has_bits);
          legacy_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gameserver_datacenter_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_gameserver_datacenter_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_created = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_expiry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_time_expiry(&has_bits);
          time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 app_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_identity_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identity_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_identity_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramCertificate.identity_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ip_addresses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramCertificate.ip_addresses");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramCertificate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->_internal_gameserver_datacenter_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_gameserver_datacenter_ids(i), target);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_app_ids(i), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::legacy_identity_binary(this), target, stream);
  }

  // optional string identity_string = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_string().data(), static_cast<int>(this->_internal_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramCertificate.identity_string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_identity_string(), target);
  }

  // repeated string ip_addresses = 13;
  for (int i = 0, n = this->_internal_ip_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_ip_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramCertificate.ip_addresses");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gameserver_datacenter_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gameserver_datacenter_ids_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_app_ids_size());
    total_size += data_size;
  }

  // repeated string ip_addresses = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_addresses_.size());
  for (int i = 0, n = ip_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_addresses_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional string identity_string = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_string());
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_identity_binary_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_type());
    }

    // optional fixed32 time_created = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificate)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  app_ids_.MergeFrom(from.app_ids_);
  ip_addresses_.MergeFrom(from.ip_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_steam_id_ = from.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_expiry_ = from.time_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserver_datacenter_ids_.InternalSwap(&other->gameserver_datacenter_ids_);
  app_ids_.InternalSwap(&other->app_ids_);
  ip_addresses_.InternalSwap(&other->ip_addresses_);
  key_data_.Swap(&other->key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_string_.Swap(&other->identity_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, time_expiry_)
      + sizeof(CMsgSteamDatagramCertificate::time_expiry_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, legacy_identity_binary_)>(
          reinterpret_cast<char*>(&legacy_identity_binary_),
          reinterpret_cast<char*>(&other->legacy_identity_binary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}
class CMsgSteamDatagramCertificateSigned::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateSigned>()._has_bits_);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ca_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ca_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateSigned)
}
CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_key_data()) {
    private_key_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_private_key_data(),
      GetArena());
  }
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cert()) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cert(),
      GetArena());
  }
  ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ca_signature()) {
    ca_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ca_signature(),
      GetArena());
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  private_key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCertificateSigned::ArenaDtor(void* object) {
  CMsgSteamDatagramCertificateSigned* _this = reinterpret_cast< CMsgSteamDatagramCertificateSigned* >(object);
  (void)_this;
}
void CMsgSteamDatagramCertificateSigned::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      private_key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ca_signature_.ClearNonDefaultToEmpty();
    }
  }
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateSigned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes private_key_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_key_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 ca_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ca_key_id(&has_bits);
          ca_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes ca_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ca_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramCertificateSigned::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key_data(), target);
  }

  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ca_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes private_key_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key_data());
    }

    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramCertificateSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificateSigned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificateSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key_data(from._internal_private_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cert(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ca_signature(from._internal_ca_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_key_data_.Swap(&other->private_key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cert_.Swap(&other->cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ca_signature_.Swap(&other->ca_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ca_key_id_, other->ca_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramCertificateRequest::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramCertificateRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificate*>(
      ::CMsgSteamDatagramCertificate::internal_default_instance());
}
class CMsgSteamDatagramCertificateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateRequest>()._has_bits_);
  static const ::CMsgSteamDatagramCertificate& cert(const CMsgSteamDatagramCertificateRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamDatagramCertificate&
CMsgSteamDatagramCertificateRequest::_Internal::cert(const CMsgSteamDatagramCertificateRequest* msg) {
  return *msg->cert_;
}
CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateRequest)
}
CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(const CMsgSteamDatagramCertificateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificate(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateRequest)
}

void CMsgSteamDatagramCertificateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  cert_ = nullptr;
}

CMsgSteamDatagramCertificateRequest::~CMsgSteamDatagramCertificateRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramCertificateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramCertificateRequest::ArenaDtor(void* object) {
  CMsgSteamDatagramCertificateRequest* _this = reinterpret_cast< CMsgSteamDatagramCertificateRequest* >(object);
  (void)_this;
}
void CMsgSteamDatagramCertificateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramCertificateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificateRequest& CMsgSteamDatagramCertificateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificateRequest_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cert_ != nullptr);
    cert_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificate cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramCertificateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateRequest)
  return target;
}

size_t CMsgSteamDatagramCertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSteamDatagramCertificate cert = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cert_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramCertificateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificateRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateRequest::MergeFrom(const CMsgSteamDatagramCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cert()) {
    _internal_mutable_cert()->::CMsgSteamDatagramCertificate::MergeFrom(from._internal_cert());
  }
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const CMsgSteamDatagramCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateRequest::InternalSwap(CMsgSteamDatagramCertificateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cert_, other->cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingIdentityLegacyBinary* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingIdentityLegacyBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingIdentityLegacyBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificate* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificateSigned* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateSigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificateSigned >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificateRequest* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
