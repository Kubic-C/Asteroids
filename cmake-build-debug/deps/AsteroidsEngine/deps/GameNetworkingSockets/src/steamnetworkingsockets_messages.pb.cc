// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#include "steamnetworkingsockets_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto;
class CMsgSteamDatagramSessionCryptInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfo> _instance;
} _CMsgSteamDatagramSessionCryptInfo_default_instance_;
class CMsgSteamDatagramSessionCryptInfoSignedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramSessionCryptInfoSigned> _instance;
} _CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
class CMsgSteamDatagramDiagnosticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramDiagnostic> _instance;
} _CMsgSteamDatagramDiagnostic_default_instance_;
class CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkInstantaneousStats> _instance;
} _CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
class CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkLifetimeStats> _instance;
} _CMsgSteamDatagramLinkLifetimeStats_default_instance_;
class CMsgSteamDatagramConnectionQualityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionQuality> _instance;
} _CMsgSteamDatagramConnectionQuality_default_instance_;
class CMsgICECandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgICECandidate> _instance;
} _CMsgICECandidate_default_instance_;
class CMsgICERendezvous_AuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgICERendezvous_Auth> _instance;
} _CMsgICERendezvous_Auth_default_instance_;
class CMsgICERendezvousDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgICERendezvous> _instance;
} _CMsgICERendezvous_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectRequest> _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectOKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectOK> _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ConnectionClosedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ConnectionClosed> _instance;
} _CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ReliableMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ReliableMessage> _instance;
} _CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_;
class CMsgSteamNetworkingP2PRendezvous_ApplicationMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous_ApplicationMessage> _instance;
} _CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_default_instance_;
class CMsgSteamNetworkingP2PRendezvousDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingP2PRendezvous> _instance;
} _CMsgSteamNetworkingP2PRendezvous_default_instance_;
class CMsgSteamNetworkingICESessionSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingICESessionSummary> _instance;
} _CMsgSteamNetworkingICESessionSummary_default_instance_;
static void InitDefaultsscc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgICECandidate_default_instance_;
    new (ptr) ::CMsgICECandidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICECandidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgICERendezvous_default_instance_;
    new (ptr) ::CMsgICERendezvous();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICERendezvous::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgICERendezvous_Auth_default_instance_;
    new (ptr) ::CMsgICERendezvous_Auth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgICERendezvous_Auth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramConnectionQuality_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionQuality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramDiagnostic_default_instance_;
    new (ptr) ::CMsgSteamDatagramDiagnostic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDiagnostic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkInstantaneousStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramLinkLifetimeStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkLifetimeStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramSessionCryptInfo_default_instance_;
    new (ptr) ::CMsgSteamDatagramSessionCryptInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
    new (ptr) ::CMsgSteamDatagramSessionCryptInfoSigned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingICESessionSummary_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingICESessionSummary_default_instance_;
    new (ptr) ::CMsgSteamNetworkingICESessionSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingICESessionSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingICESessionSummary_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamNetworkingICESessionSummary_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectOK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectOK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_;
    new (ptr) ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto}, {
      &scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steamnetworkingsockets_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, key_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfo, ciphers_),
  1,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, info_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSessionCryptInfoSigned, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, severity_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, connected_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_corrected_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, multipath_packets_recv_sequenced_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, multipath_packets_recv_later_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, multipath_send_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_16_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_32_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_64_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_128_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_256_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_512_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_1024_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_98th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_16_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_32_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_64_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_128_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_256_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_512_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_1024_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_5th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_50th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_75th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_95th_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_98th_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  11,
  9,
  10,
  ~0u,
  ~0u,
  7,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  54,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, instantaneous_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, lifetime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgICECandidate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgICECandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgICECandidate, candidate_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous_Auth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous_Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous_Auth, pwd_frag_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous, auth_),
  PROTOBUF_FIELD_OFFSET(::CMsgICERendezvous, add_candidate_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, to_virtual_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, from_virtual_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest, from_fakeip_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, crypt_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectOK, cert_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, debug_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed, reason_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage, ice_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, msg_num_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, lane_idx_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, from_identity_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, to_identity_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, sdr_routes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ice_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, hosted_server_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connect_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connect_ok_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, connection_closed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, ack_reliable_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, first_reliable_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, reliable_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PRendezvous, application_messages_),
  1,
  10,
  2,
  7,
  0,
  8,
  9,
  3,
  4,
  5,
  6,
  11,
  12,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, failure_reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, local_candidate_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, remote_candidate_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_route_kind_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, initial_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, negotiation_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_route_kind_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, best_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, selected_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, user_settings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, ice_enable_var_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingICESessionSummary, local_candidate_types_allowed_),
  6,
  0,
  1,
  2,
  3,
  5,
  4,
  11,
  13,
  14,
  12,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::CMsgSteamDatagramSessionCryptInfo)},
  { 15, 22, sizeof(::CMsgSteamDatagramSessionCryptInfoSigned)},
  { 24, 31, sizeof(::CMsgSteamDatagramDiagnostic)},
  { 33, 46, sizeof(::CMsgSteamDatagramLinkInstantaneousStats)},
  { 54, 134, sizeof(::CMsgSteamDatagramLinkLifetimeStats)},
  { 209, 216, sizeof(::CMsgSteamDatagramConnectionQuality)},
  { 218, 224, sizeof(::CMsgICECandidate)},
  { 225, 231, sizeof(::CMsgICERendezvous_Auth)},
  { 232, 239, sizeof(::CMsgICERendezvous)},
  { 241, 251, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectRequest)},
  { 256, 263, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectOK)},
  { 265, 272, sizeof(::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed)},
  { 274, 280, sizeof(::CMsgSteamNetworkingP2PRendezvous_ReliableMessage)},
  { 281, 290, sizeof(::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage)},
  { 294, 314, sizeof(::CMsgSteamNetworkingP2PRendezvous)},
  { 329, 349, sizeof(::CMsgSteamNetworkingICESessionSummary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSessionCryptInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramDiagnostic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramLinkLifetimeStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramConnectionQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgICECandidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgICERendezvous_Auth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgICERendezvous_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingP2PRendezvous_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingICESessionSummary_default_instance_),
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steamnetworkingsockets_messages.proto\032"
  "+steamnetworkingsockets_messages_certs.p"
  "roto\"\367\001\n!CMsgSteamDatagramSessionCryptIn"
  "fo\022=\n\010key_type\030\001 \001(\0162+.CMsgSteamDatagram"
  "SessionCryptInfo.EKeyType\022\020\n\010key_data\030\002 "
  "\001(\014\022\r\n\005nonce\030\003 \001(\006\022\030\n\020protocol_version\030\004"
  " \001(\r\022/\n\007ciphers\030\005 \003(\0162\036.ESteamNetworking"
  "SocketsCipher\"\'\n\010EKeyType\022\013\n\007INVALID\020\000\022\016"
  "\n\nCURVE25519\020\001\"J\n\'CMsgSteamDatagramSessi"
  "onCryptInfoSigned\022\014\n\004info\030\001 \001(\014\022\021\n\tsigna"
  "ture\030\002 \001(\014\"=\n\033CMsgSteamDatagramDiagnosti"
  "c\022\020\n\010severity\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\213\002\n\'CM"
  "sgSteamDatagramLinkInstantaneousStats\022\037\n"
  "\027out_packets_per_sec_x10\030\001 \001(\r\022\031\n\021out_by"
  "tes_per_sec\030\002 \001(\r\022\036\n\026in_packets_per_sec_"
  "x10\030\003 \001(\r\022\030\n\020in_bytes_per_sec\030\004 \001(\r\022\017\n\007p"
  "ing_ms\030\005 \001(\r\022\033\n\023packets_dropped_pct\030\006 \001("
  "\r\022\"\n\032packets_weird_sequence_pct\030\007 \001(\r\022\030\n"
  "\020peak_jitter_usec\030\010 \001(\r\"\231\021\n\"CMsgSteamDat"
  "agramLinkLifetimeStats\022\031\n\021connected_seco"
  "nds\030\002 \001(\r\022\024\n\014packets_sent\030\003 \001(\004\022\017\n\007kb_se"
  "nt\030\004 \001(\004\022\024\n\014packets_recv\030\005 \001(\004\022\017\n\007kb_rec"
  "v\030\006 \001(\004\022\036\n\026packets_recv_sequenced\030\007 \001(\004\022"
  "\034\n\024packets_recv_dropped\030\010 \001(\004\022!\n\031packets"
  "_recv_out_of_order\030\t \001(\004\022+\n#packets_recv"
  "_out_of_order_corrected\030\017 \001(\004\022\036\n\026packets"
  "_recv_duplicate\030\n \001(\004\022\032\n\022packets_recv_lu"
  "rch\030\013 \001(\004\022(\n multipath_packets_recv_sequ"
  "enced\030\014 \003(\004\022$\n\034multipath_packets_recv_la"
  "ter\030\r \003(\004\022\036\n\026multipath_send_enabled\030\016 \001("
  "\r\022\035\n\025quality_histogram_100\030\025 \001(\r\022\034\n\024qual"
  "ity_histogram_99\030\026 \001(\r\022\034\n\024quality_histog"
  "ram_97\030\027 \001(\r\022\034\n\024quality_histogram_95\030\030 \001"
  "(\r\022\034\n\024quality_histogram_90\030\031 \001(\r\022\034\n\024qual"
  "ity_histogram_75\030\032 \001(\r\022\034\n\024quality_histog"
  "ram_50\030\033 \001(\r\022\033\n\023quality_histogram_1\030\034 \001("
  "\r\022\036\n\026quality_histogram_dead\030\035 \001(\r\022\031\n\021qua"
  "lity_ntile_2nd\030\036 \001(\r\022\031\n\021quality_ntile_5t"
  "h\030\037 \001(\r\022\032\n\022quality_ntile_25th\030  \001(\r\022\032\n\022q"
  "uality_ntile_50th\030! \001(\r\022\031\n\021ping_histogra"
  "m_25\030) \001(\r\022\031\n\021ping_histogram_50\030* \001(\r\022\031\n"
  "\021ping_histogram_75\030+ \001(\r\022\032\n\022ping_histogr"
  "am_100\030, \001(\r\022\032\n\022ping_histogram_125\030- \001(\r"
  "\022\032\n\022ping_histogram_150\030. \001(\r\022\032\n\022ping_his"
  "togram_200\030/ \001(\r\022\032\n\022ping_histogram_300\0300"
  " \001(\r\022\032\n\022ping_histogram_max\0301 \001(\r\022\026\n\016ping"
  "_ntile_5th\0302 \001(\r\022\027\n\017ping_ntile_50th\0303 \001("
  "\r\022\027\n\017ping_ntile_75th\0304 \001(\r\022\027\n\017ping_ntile"
  "_95th\0305 \001(\r\022\027\n\017ping_ntile_98th\0306 \001(\r\022#\n\033"
  "jitter_histogram_negligible\030= \001(\r\022\032\n\022jit"
  "ter_histogram_1\030> \001(\r\022\032\n\022jitter_histogra"
  "m_2\030\? \001(\r\022\032\n\022jitter_histogram_5\030@ \001(\r\022\033\n"
  "\023jitter_histogram_10\030A \001(\r\022\033\n\023jitter_his"
  "togram_20\030B \001(\r\022\023\n\013txspeed_max\030C \001(\r\022\034\n\024"
  "txspeed_histogram_16\030D \001(\r\022\034\n\024txspeed_hi"
  "stogram_32\030E \001(\r\022\034\n\024txspeed_histogram_64"
  "\030F \001(\r\022\035\n\025txspeed_histogram_128\030G \001(\r\022\035\n"
  "\025txspeed_histogram_256\030H \001(\r\022\035\n\025txspeed_"
  "histogram_512\030I \001(\r\022\036\n\026txspeed_histogram"
  "_1024\030J \001(\r\022\035\n\025txspeed_histogram_max\030K \001"
  "(\r\022\031\n\021txspeed_ntile_5th\030L \001(\r\022\032\n\022txspeed"
  "_ntile_50th\030M \001(\r\022\032\n\022txspeed_ntile_75th\030"
  "N \001(\r\022\032\n\022txspeed_ntile_95th\030O \001(\r\022\032\n\022txs"
  "peed_ntile_98th\030P \001(\r\022\023\n\013rxspeed_max\030Q \001"
  "(\r\022\034\n\024rxspeed_histogram_16\030R \001(\r\022\034\n\024rxsp"
  "eed_histogram_32\030S \001(\r\022\034\n\024rxspeed_histog"
  "ram_64\030T \001(\r\022\035\n\025rxspeed_histogram_128\030U "
  "\001(\r\022\035\n\025rxspeed_histogram_256\030V \001(\r\022\035\n\025rx"
  "speed_histogram_512\030W \001(\r\022\036\n\026rxspeed_his"
  "togram_1024\030X \001(\r\022\035\n\025rxspeed_histogram_m"
  "ax\030Y \001(\r\022\031\n\021rxspeed_ntile_5th\030Z \001(\r\022\032\n\022r"
  "xspeed_ntile_50th\030[ \001(\r\022\032\n\022rxspeed_ntile"
  "_75th\030\\ \001(\r\022\032\n\022rxspeed_ntile_95th\030] \001(\r\022"
  "\032\n\022rxspeed_ntile_98th\030^ \001(\r\"\234\001\n\"CMsgStea"
  "mDatagramConnectionQuality\022\?\n\rinstantane"
  "ous\030\001 \001(\0132(.CMsgSteamDatagramLinkInstant"
  "aneousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgStea"
  "mDatagramLinkLifetimeStats\"%\n\020CMsgICECan"
  "didate\022\021\n\tcandidate\030\003 \001(\t\"~\n\021CMsgICERend"
  "ezvous\022%\n\004auth\030\002 \001(\0132\027.CMsgICERendezvous"
  ".Auth\022(\n\radd_candidate\030\001 \001(\0132\021.CMsgICECa"
  "ndidate\032\030\n\004Auth\022\020\n\010pwd_frag\030\001 \001(\t\"\243\t\n CM"
  "sgSteamNetworkingP2PRendezvous\022\025\n\rfrom_i"
  "dentity\030\010 \001(\t\022\032\n\022from_connection_id\030\t \001("
  "\007\022\023\n\013to_identity\030\n \001(\t\022\030\n\020to_connection_"
  "id\030\001 \001(\007\022\022\n\nsdr_routes\030\002 \001(\014\022 \n\030ack_peer"
  "_routes_revision\030\003 \001(\r\022\023\n\013ice_enabled\030\007 "
  "\001(\010\022\034\n\024hosted_server_ticket\030\016 \001(\014\022I\n\017con"
  "nect_request\030\004 \001(\01320.CMsgSteamNetworking"
  "P2PRendezvous.ConnectRequest\022\?\n\nconnect_"
  "ok\030\005 \001(\0132+.CMsgSteamNetworkingP2PRendezv"
  "ous.ConnectOK\022M\n\021connection_closed\030\006 \001(\013"
  "22.CMsgSteamNetworkingP2PRendezvous.Conn"
  "ectionClosed\022\030\n\020ack_reliable_msg\030\013 \001(\r\022\032"
  "\n\022first_reliable_msg\030\014 \001(\r\022L\n\021reliable_m"
  "essages\030\r \003(\01321.CMsgSteamNetworkingP2PRe"
  "ndezvous.ReliableMessage\022R\n\024application_"
  "messages\030\017 \003(\01324.CMsgSteamNetworkingP2PR"
  "endezvous.ApplicationMessage\032\305\001\n\016Connect"
  "Request\0227\n\005crypt\030\006 \001(\0132(.CMsgSteamDatagr"
  "amSessionCryptInfoSigned\0221\n\004cert\030\007 \001(\0132#"
  ".CMsgSteamDatagramCertificateSigned\022\027\n\017t"
  "o_virtual_port\030\t \001(\r\022\031\n\021from_virtual_por"
  "t\030\n \001(\r\022\023\n\013from_fakeip\030\013 \001(\t\032w\n\tConnectO"
  "K\0227\n\005crypt\030\005 \001(\0132(.CMsgSteamDatagramSess"
  "ionCryptInfoSigned\0221\n\004cert\030\006 \001(\0132#.CMsgS"
  "teamDatagramCertificateSigned\0326\n\020Connect"
  "ionClosed\022\r\n\005debug\030\005 \001(\t\022\023\n\013reason_code\030"
  "\006 \001(\r\0322\n\017ReliableMessage\022\037\n\003ice\030\001 \001(\0132\022."
  "CMsgICERendezvous\032T\n\022ApplicationMessage\022"
  "\014\n\004data\030\001 \001(\014\022\017\n\007msg_num\030\002 \001(\004\022\r\n\005flags\030"
  "\003 \001(\r\022\020\n\010lane_idx\030\004 \001(\r\"\246\003\n$CMsgSteamNet"
  "workingICESessionSummary\022\033\n\023failure_reas"
  "on_code\030\007 \001(\r\022\035\n\025local_candidate_types\030\001"
  " \001(\r\022\036\n\026remote_candidate_types\030\002 \001(\r\022\032\n\022"
  "initial_route_kind\030\003 \001(\r\022\024\n\014initial_ping"
  "\030\004 \001(\r\022\025\n\rinitial_score\030\006 \001(\r\022\026\n\016negotia"
  "tion_ms\030\005 \001(\r\022\027\n\017best_route_kind\030\020 \001(\r\022\021"
  "\n\tbest_ping\030\021 \001(\r\022\022\n\nbest_score\030\022 \001(\r\022\021\n"
  "\tbest_time\030\023 \001(\r\022\030\n\020selected_seconds\030\014 \001"
  "(\r\022\025\n\ruser_settings\030\r \001(\r\022\026\n\016ice_enable_"
  "var\030\016 \001(\r\022%\n\035local_candidate_types_allow"
  "ed\030\017 \001(\r*\247\001\n\035ESteamNetworkingSocketsCiph"
  "er\022+\n\'k_ESteamNetworkingSocketsCipher_IN"
  "VALID\020\000\022(\n$k_ESteamNetworkingSocketsCiph"
  "er_NULL\020\001\022/\n+k_ESteamNetworkingSocketsCi"
  "pher_AES_256_GCM\020\002B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamnetworkingsockets_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steamnetworkingsockets_5fmessages_2eproto_sccs[16] = {
  &scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingICESessionSummary_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto.base,
  &scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamnetworkingsockets_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_steamnetworkingsockets_5fmessages_2eproto, "steamnetworkingsockets_messages.proto", 5065,
  &descriptor_table_steamnetworkingsockets_5fmessages_2eproto_once, descriptor_table_steamnetworkingsockets_5fmessages_2eproto_sccs, descriptor_table_steamnetworkingsockets_5fmessages_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_2eproto, 16, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto[0];
}
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::INVALID;
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::CURVE25519;
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MIN;
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MAX;
constexpr int CMsgSteamDatagramSessionCryptInfo::EKeyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamNetworkingSocketsCipher_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_2eproto[1];
}
bool ESteamNetworkingSocketsCipher_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance() {
}
class CMsgSteamDatagramSessionCryptInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSessionCryptInfo>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ciphers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSessionCryptInfo)
}
CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ciphers_(from.ciphers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_data()) {
    key_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_data(),
      GetArena());
  }
  ::memcpy(&key_type_, &from.key_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSessionCryptInfo)
}

void CMsgSteamDatagramSessionCryptInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
}

CMsgSteamDatagramSessionCryptInfo::~CMsgSteamDatagramSessionCryptInfo() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSessionCryptInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramSessionCryptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfo::ArenaDtor(void* object) {
  CMsgSteamDatagramSessionCryptInfo* _this = reinterpret_cast< CMsgSteamDatagramSessionCryptInfo* >(object);
  (void)_this;
}
void CMsgSteamDatagramSessionCryptInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSessionCryptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramSessionCryptInfo& CMsgSteamDatagramSessionCryptInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramSessionCryptInfo_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSessionCryptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSessionCryptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ciphers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&key_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&key_type_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSessionCryptInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(val))) {
            _internal_set_key_type(static_cast<::CMsgSteamDatagramSessionCryptInfo_EKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes key_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ESteamNetworkingSocketsCipher_IsValid(val))) {
              _internal_add_ciphers(static_cast<::ESteamNetworkingSocketsCipher>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_ciphers(), ptr, ctx, ::ESteamNetworkingSocketsCipher_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramSessionCryptInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSessionCryptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key_data(), target);
  }

  // optional fixed64 nonce = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_nonce(), target);
  }

  // optional uint32 protocol_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protocol_version(), target);
  }

  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  for (int i = 0, n = this->_internal_ciphers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_ciphers(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSessionCryptInfo)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSessionCryptInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ESteamNetworkingSocketsCipher ciphers = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ciphers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ciphers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_type());
    }

    // optional uint32 protocol_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

    // optional fixed64 nonce = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramSessionCryptInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSessionCryptInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSessionCryptInfo)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSessionCryptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ciphers_.MergeFrom(from.ciphers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSessionCryptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfo::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfo::InternalSwap(CMsgSteamDatagramSessionCryptInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ciphers_.InternalSwap(&other->ciphers_);
  key_data_.Swap(&other->key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, nonce_)
      + sizeof(CMsgSteamDatagramSessionCryptInfo::nonce_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, key_type_)>(
          reinterpret_cast<char*>(&key_type_),
          reinterpret_cast<char*>(&other->key_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSessionCryptInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance() {
}
class CMsgSteamDatagramSessionCryptInfoSigned::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramSessionCryptInfoSigned>()._has_bits_);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSessionCryptInfoSigned)
}
CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_info()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSessionCryptInfoSigned)
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramSessionCryptInfoSigned::~CMsgSteamDatagramSessionCryptInfoSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSessionCryptInfoSigned)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramSessionCryptInfoSigned::ArenaDtor(void* object) {
  CMsgSteamDatagramSessionCryptInfoSigned* _this = reinterpret_cast< CMsgSteamDatagramSessionCryptInfoSigned* >(object);
  (void)_this;
}
void CMsgSteamDatagramSessionCryptInfoSigned::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramSessionCryptInfoSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramSessionCryptInfoSigned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramSessionCryptInfoSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSessionCryptInfoSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramSessionCryptInfoSigned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramSessionCryptInfoSigned::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSessionCryptInfoSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_info(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSessionCryptInfoSigned)
  return target;
}

size_t CMsgSteamDatagramSessionCryptInfoSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSessionCryptInfoSigned)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_info());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfoSigned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramSessionCryptInfoSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramSessionCryptInfoSigned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramSessionCryptInfoSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSessionCryptInfoSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfoSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramSessionCryptInfoSigned::InternalSwap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramSessionCryptInfoSigned::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}
class CMsgSteamDatagramDiagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramDiagnostic>()._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramDiagnostic)
}
CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDiagnostic)
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  severity_ = 0u;
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDiagnostic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDiagnostic::ArenaDtor(void* object) {
  CMsgSteamDatagramDiagnostic* _this = reinterpret_cast< CMsgSteamDatagramDiagnostic* >(object);
  (void)_this;
}
void CMsgSteamDatagramDiagnostic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramDiagnostic_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  severity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramDiagnostic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamDatagramDiagnostic.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramDiagnostic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_severity(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDiagnostic.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDiagnostic)
  return target;
}

size_t CMsgSteamDatagramDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDiagnostic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 severity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_severity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramDiagnostic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDiagnostic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDiagnostic)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDiagnostic::InternalSwap(CMsgSteamDatagramDiagnostic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(severity_, other->severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}
class CMsgSteamDatagramLinkInstantaneousStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramLinkInstantaneousStats>()._has_bits_);
  static void set_has_out_packets_per_sec_x10(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_out_bytes_per_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_packets_per_sec_x10(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_bytes_per_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packets_dropped_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packets_weird_sequence_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_peak_jitter_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramLinkInstantaneousStats)
}
CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&out_packets_per_sec_x10_, &from.out_packets_per_sec_x10_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_jitter_usec_) -
    reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkInstantaneousStats)
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_jitter_usec_) -
      reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkInstantaneousStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramLinkInstantaneousStats::ArenaDtor(void* object) {
  CMsgSteamDatagramLinkInstantaneousStats* _this = reinterpret_cast< CMsgSteamDatagramLinkInstantaneousStats* >(object);
  (void)_this;
}
void CMsgSteamDatagramLinkInstantaneousStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramLinkInstantaneousStats_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_jitter_usec_) -
        reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramLinkInstantaneousStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_out_packets_per_sec_x10(&has_bits);
          out_packets_per_sec_x10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 out_bytes_per_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_out_bytes_per_sec(&has_bits);
          out_bytes_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_packets_per_sec_x10(&has_bits);
          in_packets_per_sec_x10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_bytes_per_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_in_bytes_per_sec(&has_bits);
          in_bytes_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ping_ms(&has_bits);
          ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 packets_dropped_pct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_packets_dropped_pct(&has_bits);
          packets_dropped_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 packets_weird_sequence_pct = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_packets_weird_sequence_pct(&has_bits);
          packets_weird_sequence_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 peak_jitter_usec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_peak_jitter_usec(&has_bits);
          peak_jitter_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramLinkInstantaneousStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_peak_jitter_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkInstantaneousStats)
  return target;
}

size_t CMsgSteamDatagramLinkInstantaneousStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkInstantaneousStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_peak_jitter_usec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramLinkInstantaneousStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkInstantaneousStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkInstantaneousStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      out_packets_per_sec_x10_ = from.out_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_bytes_per_sec_ = from.out_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_packets_per_sec_x10_ = from.in_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_bytes_per_sec_ = from.in_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_dropped_pct_ = from.packets_dropped_pct_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_weird_sequence_pct_ = from.packets_weird_sequence_pct_;
    }
    if (cached_has_bits & 0x00000080u) {
      peak_jitter_usec_ = from.peak_jitter_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::InternalSwap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_)
      + sizeof(CMsgSteamDatagramLinkInstantaneousStats::peak_jitter_usec_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_)>(
          reinterpret_cast<char*>(&out_packets_per_sec_x10_),
          reinterpret_cast<char*>(&other->out_packets_per_sec_x10_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}
class CMsgSteamDatagramLinkLifetimeStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramLinkLifetimeStats>()._has_bits_);
  static void set_has_connected_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_packets_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kb_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packets_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kb_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packets_recv_sequenced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packets_recv_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packets_recv_out_of_order(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_packets_recv_out_of_order_corrected(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_packets_recv_duplicate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_packets_recv_lurch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_multipath_send_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_quality_histogram_100(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_quality_histogram_99(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_quality_histogram_97(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_quality_histogram_95(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_quality_histogram_90(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_quality_histogram_75(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_quality_histogram_50(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_quality_histogram_1(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_quality_histogram_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_quality_ntile_2nd(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_quality_ntile_5th(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_quality_ntile_25th(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_quality_ntile_50th(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ping_histogram_25(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ping_histogram_50(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ping_histogram_75(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ping_histogram_100(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ping_histogram_125(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ping_histogram_150(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ping_histogram_200(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ping_histogram_300(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ping_histogram_max(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ping_ntile_5th(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ping_ntile_50th(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ping_ntile_75th(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ping_ntile_95th(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ping_ntile_98th(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_jitter_histogram_negligible(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_jitter_histogram_1(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_jitter_histogram_2(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_jitter_histogram_5(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_jitter_histogram_10(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_jitter_histogram_20(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_txspeed_max(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_txspeed_histogram_16(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_txspeed_histogram_32(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_txspeed_histogram_64(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_txspeed_histogram_128(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_txspeed_histogram_256(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_txspeed_histogram_512(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_txspeed_histogram_1024(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_txspeed_histogram_max(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_txspeed_ntile_5th(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_txspeed_ntile_50th(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_txspeed_ntile_75th(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_txspeed_ntile_95th(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_txspeed_ntile_98th(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_rxspeed_max(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_rxspeed_histogram_16(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_rxspeed_histogram_32(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_rxspeed_histogram_64(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_rxspeed_histogram_128(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_rxspeed_histogram_256(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_rxspeed_histogram_512(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_rxspeed_histogram_1024(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_rxspeed_histogram_max(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_rxspeed_ntile_5th(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_rxspeed_ntile_50th(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_rxspeed_ntile_75th(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_rxspeed_ntile_95th(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_rxspeed_ntile_98th(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
};

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multipath_packets_recv_sequenced_(arena),
  multipath_packets_recv_later_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramLinkLifetimeStats)
}
CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      multipath_packets_recv_sequenced_(from.multipath_packets_recv_sequenced_),
      multipath_packets_recv_later_(from.multipath_packets_recv_later_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packets_sent_, &from.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rxspeed_ntile_95th_) -
    reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_95th_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkLifetimeStats)
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  ::memset(&packets_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rxspeed_ntile_95th_) -
      reinterpret_cast<char*>(&packets_sent_)) + sizeof(rxspeed_ntile_95th_));
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkLifetimeStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamDatagramLinkLifetimeStats::ArenaDtor(void* object) {
  CMsgSteamDatagramLinkLifetimeStats* _this = reinterpret_cast< CMsgSteamDatagramLinkLifetimeStats* >(object);
  (void)_this;
}
void CMsgSteamDatagramLinkLifetimeStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramLinkLifetimeStats_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramLinkLifetimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkLifetimeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multipath_packets_recv_sequenced_.Clear();
  multipath_packets_recv_later_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&packets_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multipath_send_enabled_) -
        reinterpret_cast<char*>(&packets_sent_)) + sizeof(multipath_send_enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&packets_recv_out_of_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_histogram_95_) -
        reinterpret_cast<char*>(&packets_recv_out_of_order_)) + sizeof(quality_histogram_95_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&quality_histogram_90_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_ntile_25th_) -
        reinterpret_cast<char*>(&quality_histogram_90_)) + sizeof(quality_ntile_25th_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&quality_ntile_50th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_200_) -
        reinterpret_cast<char*>(&quality_ntile_50th_)) + sizeof(ping_histogram_200_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ping_histogram_300_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_histogram_negligible_) -
        reinterpret_cast<char*>(&ping_histogram_300_)) + sizeof(jitter_histogram_negligible_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&jitter_histogram_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txspeed_histogram_32_) -
        reinterpret_cast<char*>(&jitter_histogram_1_)) + sizeof(txspeed_histogram_32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&txspeed_histogram_64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&txspeed_ntile_5th_) -
        reinterpret_cast<char*>(&txspeed_histogram_64_)) + sizeof(txspeed_ntile_5th_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&txspeed_ntile_50th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_histogram_64_) -
        reinterpret_cast<char*>(&txspeed_ntile_50th_)) + sizeof(rxspeed_histogram_64_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rxspeed_histogram_128_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rxspeed_ntile_75th_) -
        reinterpret_cast<char*>(&rxspeed_histogram_128_)) + sizeof(rxspeed_ntile_75th_));
  }
  rxspeed_ntile_95th_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramLinkLifetimeStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 connected_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connected_seconds(&_has_bits_);
          connected_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_packets_sent(&_has_bits_);
          packets_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 kb_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kb_sent(&_has_bits_);
          kb_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_packets_recv(&_has_bits_);
          packets_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 kb_recv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kb_recv(&_has_bits_);
          kb_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_sequenced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_packets_recv_sequenced(&_has_bits_);
          packets_recv_sequenced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_dropped = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_packets_recv_dropped(&_has_bits_);
          packets_recv_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_out_of_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_packets_recv_out_of_order(&_has_bits_);
          packets_recv_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_duplicate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_packets_recv_duplicate(&_has_bits_);
          packets_recv_duplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_lurch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_packets_recv_lurch(&_has_bits_);
          packets_recv_lurch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 multipath_packets_recv_sequenced = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_multipath_packets_recv_sequenced(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_multipath_packets_recv_sequenced(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 multipath_packets_recv_later = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_multipath_packets_recv_later(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_multipath_packets_recv_later(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multipath_send_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_multipath_send_enabled(&_has_bits_);
          multipath_send_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packets_recv_out_of_order_corrected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_packets_recv_out_of_order_corrected(&_has_bits_);
          packets_recv_out_of_order_corrected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_100 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_quality_histogram_100(&_has_bits_);
          quality_histogram_100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_99 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_quality_histogram_99(&_has_bits_);
          quality_histogram_99_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_97 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_quality_histogram_97(&_has_bits_);
          quality_histogram_97_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_95 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_quality_histogram_95(&_has_bits_);
          quality_histogram_95_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_90 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_quality_histogram_90(&_has_bits_);
          quality_histogram_90_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_75 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_quality_histogram_75(&_has_bits_);
          quality_histogram_75_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_50 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_quality_histogram_50(&_has_bits_);
          quality_histogram_50_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_1 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_quality_histogram_1(&_has_bits_);
          quality_histogram_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_histogram_dead = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_quality_histogram_dead(&_has_bits_);
          quality_histogram_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_ntile_2nd = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_quality_ntile_2nd(&_has_bits_);
          quality_ntile_2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_ntile_5th = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_quality_ntile_5th(&_has_bits_);
          quality_ntile_5th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_ntile_25th = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_quality_ntile_25th(&_has_bits_);
          quality_ntile_25th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality_ntile_50th = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quality_ntile_50th(&_has_bits_);
          quality_ntile_50th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_25 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ping_histogram_25(&_has_bits_);
          ping_histogram_25_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_50 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ping_histogram_50(&_has_bits_);
          ping_histogram_50_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_75 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ping_histogram_75(&_has_bits_);
          ping_histogram_75_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_100 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ping_histogram_100(&_has_bits_);
          ping_histogram_100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_125 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ping_histogram_125(&_has_bits_);
          ping_histogram_125_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_150 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ping_histogram_150(&_has_bits_);
          ping_histogram_150_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_200 = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ping_histogram_200(&_has_bits_);
          ping_histogram_200_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_300 = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_ping_histogram_300(&_has_bits_);
          ping_histogram_300_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_histogram_max = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_ping_histogram_max(&_has_bits_);
          ping_histogram_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ntile_5th = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ping_ntile_5th(&_has_bits_);
          ping_ntile_5th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ntile_50th = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ping_ntile_50th(&_has_bits_);
          ping_ntile_50th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ntile_75th = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ping_ntile_75th(&_has_bits_);
          ping_ntile_75th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ntile_95th = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ping_ntile_95th(&_has_bits_);
          ping_ntile_95th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_ntile_98th = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ping_ntile_98th(&_has_bits_);
          ping_ntile_98th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_negligible = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_jitter_histogram_negligible(&_has_bits_);
          jitter_histogram_negligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_1 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_jitter_histogram_1(&_has_bits_);
          jitter_histogram_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_2 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_jitter_histogram_2(&_has_bits_);
          jitter_histogram_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_5 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_jitter_histogram_5(&_has_bits_);
          jitter_histogram_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_10 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_jitter_histogram_10(&_has_bits_);
          jitter_histogram_10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jitter_histogram_20 = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_jitter_histogram_20(&_has_bits_);
          jitter_histogram_20_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_max = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_txspeed_max(&_has_bits_);
          txspeed_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_16 = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_txspeed_histogram_16(&_has_bits_);
          txspeed_histogram_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_32 = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_txspeed_histogram_32(&_has_bits_);
          txspeed_histogram_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_64 = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_txspeed_histogram_64(&_has_bits_);
          txspeed_histogram_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_128 = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_txspeed_histogram_128(&_has_bits_);
          txspeed_histogram_128_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_256 = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_txspeed_histogram_256(&_has_bits_);
          txspeed_histogram_256_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_512 = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_txspeed_histogram_512(&_has_bits_);
          txspeed_histogram_512_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_1024 = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_txspeed_histogram_1024(&_has_bits_);
          txspeed_histogram_1024_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_histogram_max = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_txspeed_histogram_max(&_has_bits_);
          txspeed_histogram_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_ntile_5th = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_txspeed_ntile_5th(&_has_bits_);
          txspeed_ntile_5th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_ntile_50th = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_txspeed_ntile_50th(&_has_bits_);
          txspeed_ntile_50th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_ntile_75th = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_txspeed_ntile_75th(&_has_bits_);
          txspeed_ntile_75th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_ntile_95th = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_txspeed_ntile_95th(&_has_bits_);
          txspeed_ntile_95th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txspeed_ntile_98th = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_txspeed_ntile_98th(&_has_bits_);
          txspeed_ntile_98th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_max = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_rxspeed_max(&_has_bits_);
          rxspeed_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_16 = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_rxspeed_histogram_16(&_has_bits_);
          rxspeed_histogram_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_32 = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_rxspeed_histogram_32(&_has_bits_);
          rxspeed_histogram_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_64 = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rxspeed_histogram_64(&_has_bits_);
          rxspeed_histogram_64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_128 = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rxspeed_histogram_128(&_has_bits_);
          rxspeed_histogram_128_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_256 = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_rxspeed_histogram_256(&_has_bits_);
          rxspeed_histogram_256_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_512 = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_rxspeed_histogram_512(&_has_bits_);
          rxspeed_histogram_512_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_1024 = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_rxspeed_histogram_1024(&_has_bits_);
          rxspeed_histogram_1024_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_histogram_max = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_rxspeed_histogram_max(&_has_bits_);
          rxspeed_histogram_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_ntile_5th = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_rxspeed_ntile_5th(&_has_bits_);
          rxspeed_ntile_5th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_ntile_50th = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_rxspeed_ntile_50th(&_has_bits_);
          rxspeed_ntile_50th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_ntile_75th = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_rxspeed_ntile_75th(&_has_bits_);
          rxspeed_ntile_75th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_ntile_95th = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_rxspeed_ntile_95th(&_has_bits_);
          rxspeed_ntile_95th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rxspeed_ntile_98th = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_rxspeed_ntile_98th(&_has_bits_);
          rxspeed_ntile_98th_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramLinkLifetimeStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkLifetimeStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 connected_seconds = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_connected_seconds(), target);
  }

  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_packets_recv_lurch(), target);
  }

  // repeated uint64 multipath_packets_recv_sequenced = 12;
  for (int i = 0, n = this->_internal_multipath_packets_recv_sequenced_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_multipath_packets_recv_sequenced(i), target);
  }

  // repeated uint64 multipath_packets_recv_later = 13;
  for (int i = 0, n = this->_internal_multipath_packets_recv_later_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_multipath_packets_recv_later(i), target);
  }

  // optional uint32 multipath_send_enabled = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_multipath_send_enabled(), target);
  }

  // optional uint64 packets_recv_out_of_order_corrected = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_packets_recv_out_of_order_corrected(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_ping_histogram_200(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_ping_histogram_max(), target);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_ping_ntile_5th(), target);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(64, this->_internal_jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_jitter_histogram_10(), target);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_jitter_histogram_20(), target);
  }

  // optional uint32 txspeed_max = 67;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_txspeed_max(), target);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(68, this->_internal_txspeed_histogram_16(), target);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_txspeed_histogram_32(), target);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_txspeed_histogram_64(), target);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_txspeed_histogram_128(), target);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_txspeed_histogram_256(), target);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(73, this->_internal_txspeed_histogram_512(), target);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_txspeed_histogram_1024(), target);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_txspeed_histogram_max(), target);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(76, this->_internal_txspeed_ntile_5th(), target);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(77, this->_internal_txspeed_ntile_50th(), target);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(78, this->_internal_txspeed_ntile_75th(), target);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(79, this->_internal_txspeed_ntile_95th(), target);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(80, this->_internal_txspeed_ntile_98th(), target);
  }

  // optional uint32 rxspeed_max = 81;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(81, this->_internal_rxspeed_max(), target);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(82, this->_internal_rxspeed_histogram_16(), target);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(83, this->_internal_rxspeed_histogram_32(), target);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(84, this->_internal_rxspeed_histogram_64(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 rxspeed_histogram_128 = 85;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(85, this->_internal_rxspeed_histogram_128(), target);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(86, this->_internal_rxspeed_histogram_256(), target);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(87, this->_internal_rxspeed_histogram_512(), target);
  }

  // optional uint32 rxspeed_histogram_1024 = 88;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(88, this->_internal_rxspeed_histogram_1024(), target);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(89, this->_internal_rxspeed_histogram_max(), target);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(90, this->_internal_rxspeed_ntile_5th(), target);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_rxspeed_ntile_50th(), target);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_rxspeed_ntile_75th(), target);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(93, this->_internal_rxspeed_ntile_95th(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rxspeed_ntile_98th = 94;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(94, this->_internal_rxspeed_ntile_98th(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkLifetimeStats)
  return target;
}

size_t CMsgSteamDatagramLinkLifetimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkLifetimeStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 multipath_packets_recv_sequenced = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->multipath_packets_recv_sequenced_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_multipath_packets_recv_sequenced_size());
    total_size += data_size;
  }

  // repeated uint64 multipath_packets_recv_later = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->multipath_packets_recv_later_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_multipath_packets_recv_later_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 packets_sent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_dropped());
    }

    // optional uint32 connected_seconds = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connected_seconds());
    }

    // optional uint32 multipath_send_enabled = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multipath_send_enabled());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 packets_recv_out_of_order = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_duplicate());
    }

    // optional uint64 packets_recv_lurch = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_lurch());
    }

    // optional uint64 packets_recv_out_of_order_corrected = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packets_recv_out_of_order_corrected());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_95());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 quality_histogram_90 = 25;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_75());
    }

    // optional uint32 quality_histogram_50 = 27;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_50());
    }

    // optional uint32 quality_histogram_1 = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_ntile_25th());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 quality_ntile_50th = 33;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_25());
    }

    // optional uint32 ping_histogram_50 = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_50());
    }

    // optional uint32 ping_histogram_75 = 43;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_75());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_200());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 ping_histogram_300 = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_histogram_max());
    }

    // optional uint32 ping_ntile_5th = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ntile_5th());
    }

    // optional uint32 ping_ntile_50th = 51;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_negligible());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 jitter_histogram_1 = 62;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_2());
    }

    // optional uint32 jitter_histogram_5 = 64;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_5());
    }

    // optional uint32 jitter_histogram_10 = 65;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_10());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jitter_histogram_20());
    }

    // optional uint32 txspeed_max = 67;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_max());
    }

    // optional uint32 txspeed_histogram_16 = 68;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_16());
    }

    // optional uint32 txspeed_histogram_32 = 69;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_32());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 txspeed_histogram_64 = 70;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_64());
    }

    // optional uint32 txspeed_histogram_128 = 71;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_128());
    }

    // optional uint32 txspeed_histogram_256 = 72;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_256());
    }

    // optional uint32 txspeed_histogram_512 = 73;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_512());
    }

    // optional uint32 txspeed_histogram_1024 = 74;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_1024());
    }

    // optional uint32 txspeed_histogram_max = 75;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_histogram_max());
    }

    // optional uint32 rxspeed_ntile_98th = 94;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_ntile_98th());
    }

    // optional uint32 txspeed_ntile_5th = 76;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_ntile_5th());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 txspeed_ntile_50th = 77;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_ntile_50th());
    }

    // optional uint32 txspeed_ntile_75th = 78;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_ntile_75th());
    }

    // optional uint32 txspeed_ntile_95th = 79;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_ntile_95th());
    }

    // optional uint32 txspeed_ntile_98th = 80;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txspeed_ntile_98th());
    }

    // optional uint32 rxspeed_max = 81;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_max());
    }

    // optional uint32 rxspeed_histogram_16 = 82;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_16());
    }

    // optional uint32 rxspeed_histogram_32 = 83;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_32());
    }

    // optional uint32 rxspeed_histogram_64 = 84;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_64());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 rxspeed_histogram_128 = 85;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_128());
    }

    // optional uint32 rxspeed_histogram_256 = 86;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_256());
    }

    // optional uint32 rxspeed_histogram_512 = 87;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_512());
    }

    // optional uint32 rxspeed_histogram_1024 = 88;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_1024());
    }

    // optional uint32 rxspeed_histogram_max = 89;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_histogram_max());
    }

    // optional uint32 rxspeed_ntile_5th = 90;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_ntile_5th());
    }

    // optional uint32 rxspeed_ntile_50th = 91;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_ntile_50th());
    }

    // optional uint32 rxspeed_ntile_75th = 92;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rxspeed_ntile_75th());
    }

  }
  // optional uint32 rxspeed_ntile_95th = 93;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rxspeed_ntile_95th());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramLinkLifetimeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkLifetimeStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkLifetimeStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multipath_packets_recv_sequenced_.MergeFrom(from.multipath_packets_recv_sequenced_);
  multipath_packets_recv_later_.MergeFrom(from.multipath_packets_recv_later_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      packets_sent_ = from.packets_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      kb_sent_ = from.kb_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      packets_recv_ = from.packets_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      kb_recv_ = from.kb_recv_;
    }
    if (cached_has_bits & 0x00000010u) {
      packets_recv_sequenced_ = from.packets_recv_sequenced_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_recv_dropped_ = from.packets_recv_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      connected_seconds_ = from.connected_seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      multipath_send_enabled_ = from.multipath_send_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      packets_recv_out_of_order_ = from.packets_recv_out_of_order_;
    }
    if (cached_has_bits & 0x00000200u) {
      packets_recv_duplicate_ = from.packets_recv_duplicate_;
    }
    if (cached_has_bits & 0x00000400u) {
      packets_recv_lurch_ = from.packets_recv_lurch_;
    }
    if (cached_has_bits & 0x00000800u) {
      packets_recv_out_of_order_corrected_ = from.packets_recv_out_of_order_corrected_;
    }
    if (cached_has_bits & 0x00001000u) {
      quality_histogram_100_ = from.quality_histogram_100_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_histogram_99_ = from.quality_histogram_99_;
    }
    if (cached_has_bits & 0x00004000u) {
      quality_histogram_97_ = from.quality_histogram_97_;
    }
    if (cached_has_bits & 0x00008000u) {
      quality_histogram_95_ = from.quality_histogram_95_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      quality_histogram_90_ = from.quality_histogram_90_;
    }
    if (cached_has_bits & 0x00020000u) {
      quality_histogram_75_ = from.quality_histogram_75_;
    }
    if (cached_has_bits & 0x00040000u) {
      quality_histogram_50_ = from.quality_histogram_50_;
    }
    if (cached_has_bits & 0x00080000u) {
      quality_histogram_1_ = from.quality_histogram_1_;
    }
    if (cached_has_bits & 0x00100000u) {
      quality_histogram_dead_ = from.quality_histogram_dead_;
    }
    if (cached_has_bits & 0x00200000u) {
      quality_ntile_2nd_ = from.quality_ntile_2nd_;
    }
    if (cached_has_bits & 0x00400000u) {
      quality_ntile_5th_ = from.quality_ntile_5th_;
    }
    if (cached_has_bits & 0x00800000u) {
      quality_ntile_25th_ = from.quality_ntile_25th_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      quality_ntile_50th_ = from.quality_ntile_50th_;
    }
    if (cached_has_bits & 0x02000000u) {
      ping_histogram_25_ = from.ping_histogram_25_;
    }
    if (cached_has_bits & 0x04000000u) {
      ping_histogram_50_ = from.ping_histogram_50_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_histogram_75_ = from.ping_histogram_75_;
    }
    if (cached_has_bits & 0x10000000u) {
      ping_histogram_100_ = from.ping_histogram_100_;
    }
    if (cached_has_bits & 0x20000000u) {
      ping_histogram_125_ = from.ping_histogram_125_;
    }
    if (cached_has_bits & 0x40000000u) {
      ping_histogram_150_ = from.ping_histogram_150_;
    }
    if (cached_has_bits & 0x80000000u) {
      ping_histogram_200_ = from.ping_histogram_200_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ping_histogram_300_ = from.ping_histogram_300_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_histogram_max_ = from.ping_histogram_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ntile_5th_ = from.ping_ntile_5th_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_ntile_50th_ = from.ping_ntile_50th_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ntile_75th_ = from.ping_ntile_75th_;
    }
    if (cached_has_bits & 0x00000020u) {
      ping_ntile_95th_ = from.ping_ntile_95th_;
    }
    if (cached_has_bits & 0x00000040u) {
      ping_ntile_98th_ = from.ping_ntile_98th_;
    }
    if (cached_has_bits & 0x00000080u) {
      jitter_histogram_negligible_ = from.jitter_histogram_negligible_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      jitter_histogram_1_ = from.jitter_histogram_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      jitter_histogram_2_ = from.jitter_histogram_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      jitter_histogram_5_ = from.jitter_histogram_5_;
    }
    if (cached_has_bits & 0x00000800u) {
      jitter_histogram_10_ = from.jitter_histogram_10_;
    }
    if (cached_has_bits & 0x00001000u) {
      jitter_histogram_20_ = from.jitter_histogram_20_;
    }
    if (cached_has_bits & 0x00002000u) {
      txspeed_max_ = from.txspeed_max_;
    }
    if (cached_has_bits & 0x00004000u) {
      txspeed_histogram_16_ = from.txspeed_histogram_16_;
    }
    if (cached_has_bits & 0x00008000u) {
      txspeed_histogram_32_ = from.txspeed_histogram_32_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      txspeed_histogram_64_ = from.txspeed_histogram_64_;
    }
    if (cached_has_bits & 0x00020000u) {
      txspeed_histogram_128_ = from.txspeed_histogram_128_;
    }
    if (cached_has_bits & 0x00040000u) {
      txspeed_histogram_256_ = from.txspeed_histogram_256_;
    }
    if (cached_has_bits & 0x00080000u) {
      txspeed_histogram_512_ = from.txspeed_histogram_512_;
    }
    if (cached_has_bits & 0x00100000u) {
      txspeed_histogram_1024_ = from.txspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00200000u) {
      txspeed_histogram_max_ = from.txspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00400000u) {
      rxspeed_ntile_98th_ = from.rxspeed_ntile_98th_;
    }
    if (cached_has_bits & 0x00800000u) {
      txspeed_ntile_5th_ = from.txspeed_ntile_5th_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      txspeed_ntile_50th_ = from.txspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x02000000u) {
      txspeed_ntile_75th_ = from.txspeed_ntile_75th_;
    }
    if (cached_has_bits & 0x04000000u) {
      txspeed_ntile_95th_ = from.txspeed_ntile_95th_;
    }
    if (cached_has_bits & 0x08000000u) {
      txspeed_ntile_98th_ = from.txspeed_ntile_98th_;
    }
    if (cached_has_bits & 0x10000000u) {
      rxspeed_max_ = from.rxspeed_max_;
    }
    if (cached_has_bits & 0x20000000u) {
      rxspeed_histogram_16_ = from.rxspeed_histogram_16_;
    }
    if (cached_has_bits & 0x40000000u) {
      rxspeed_histogram_32_ = from.rxspeed_histogram_32_;
    }
    if (cached_has_bits & 0x80000000u) {
      rxspeed_histogram_64_ = from.rxspeed_histogram_64_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rxspeed_histogram_128_ = from.rxspeed_histogram_128_;
    }
    if (cached_has_bits & 0x00000002u) {
      rxspeed_histogram_256_ = from.rxspeed_histogram_256_;
    }
    if (cached_has_bits & 0x00000004u) {
      rxspeed_histogram_512_ = from.rxspeed_histogram_512_;
    }
    if (cached_has_bits & 0x00000008u) {
      rxspeed_histogram_1024_ = from.rxspeed_histogram_1024_;
    }
    if (cached_has_bits & 0x00000010u) {
      rxspeed_histogram_max_ = from.rxspeed_histogram_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      rxspeed_ntile_5th_ = from.rxspeed_ntile_5th_;
    }
    if (cached_has_bits & 0x00000040u) {
      rxspeed_ntile_50th_ = from.rxspeed_ntile_50th_;
    }
    if (cached_has_bits & 0x00000080u) {
      rxspeed_ntile_75th_ = from.rxspeed_ntile_75th_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_rxspeed_ntile_95th(from._internal_rxspeed_ntile_95th());
  }
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::InternalSwap(CMsgSteamDatagramLinkLifetimeStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  multipath_packets_recv_sequenced_.InternalSwap(&other->multipath_packets_recv_sequenced_);
  multipath_packets_recv_later_.InternalSwap(&other->multipath_packets_recv_later_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_95th_)
      + sizeof(CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_95th_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_sent_)>(
          reinterpret_cast<char*>(&packets_sent_),
          reinterpret_cast<char*>(&other->packets_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->instantaneous_ = const_cast< ::CMsgSteamDatagramLinkInstantaneousStats*>(
      ::CMsgSteamDatagramLinkInstantaneousStats::internal_default_instance());
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->lifetime_ = const_cast< ::CMsgSteamDatagramLinkLifetimeStats*>(
      ::CMsgSteamDatagramLinkLifetimeStats::internal_default_instance());
}
class CMsgSteamDatagramConnectionQuality::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramConnectionQuality>()._has_bits_);
  static const ::CMsgSteamDatagramLinkInstantaneousStats& instantaneous(const CMsgSteamDatagramConnectionQuality* msg);
  static void set_has_instantaneous(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramLinkLifetimeStats& lifetime(const CMsgSteamDatagramConnectionQuality* msg);
  static void set_has_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramLinkInstantaneousStats&
CMsgSteamDatagramConnectionQuality::_Internal::instantaneous(const CMsgSteamDatagramConnectionQuality* msg) {
  return *msg->instantaneous_;
}
const ::CMsgSteamDatagramLinkLifetimeStats&
CMsgSteamDatagramConnectionQuality::_Internal::lifetime(const CMsgSteamDatagramConnectionQuality* msg) {
  return *msg->lifetime_;
}
CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionQuality)
}
CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instantaneous()) {
    instantaneous_ = new ::CMsgSteamDatagramLinkInstantaneousStats(*from.instantaneous_);
  } else {
    instantaneous_ = nullptr;
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new ::CMsgSteamDatagramLinkLifetimeStats(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionQuality)
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base);
  ::memset(&instantaneous_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetime_) -
      reinterpret_cast<char*>(&instantaneous_)) + sizeof(lifetime_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instantaneous_;
  if (this != internal_default_instance()) delete lifetime_;
}

void CMsgSteamDatagramConnectionQuality::ArenaDtor(void* object) {
  CMsgSteamDatagramConnectionQuality* _this = reinterpret_cast< CMsgSteamDatagramConnectionQuality* >(object);
  (void)_this;
}
void CMsgSteamDatagramConnectionQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(instantaneous_ != nullptr);
      instantaneous_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lifetime_ != nullptr);
      lifetime_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramConnectionQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantaneous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramConnectionQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instantaneous(this), target, stream);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lifetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionQuality)
  return target;
}

size_t CMsgSteamDatagramConnectionQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instantaneous_);
    }

    // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lifetime_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramConnectionQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_instantaneous()->::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from._internal_instantaneous());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lifetime()->::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from._internal_lifetime());
    }
  }
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionQuality::InternalSwap(CMsgSteamDatagramConnectionQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, lifetime_)
      + sizeof(CMsgSteamDatagramConnectionQuality::lifetime_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, instantaneous_)>(
          reinterpret_cast<char*>(&instantaneous_),
          reinterpret_cast<char*>(&other->instantaneous_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgICECandidate::InitAsDefaultInstance() {
}
class CMsgICECandidate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgICECandidate>()._has_bits_);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgICECandidate::CMsgICECandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgICECandidate)
}
CMsgICECandidate::CMsgICECandidate(const CMsgICECandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_candidate()) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_candidate(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICECandidate)
}

void CMsgICECandidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto.base);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgICECandidate::~CMsgICECandidate() {
  // @@protoc_insertion_point(destructor:CMsgICECandidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgICECandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgICECandidate::ArenaDtor(void* object) {
  CMsgICECandidate* _this = reinterpret_cast< CMsgICECandidate* >(object);
  (void)_this;
}
void CMsgICECandidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgICECandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgICECandidate& CMsgICECandidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgICECandidate_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgICECandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICECandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    candidate_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgICECandidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgICECandidate.candidate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgICECandidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICECandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgICECandidate.candidate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICECandidate)
  return target;
}

size_t CMsgICECandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICECandidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string candidate = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgICECandidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICECandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICECandidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgICECandidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICECandidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICECandidate)
    MergeFrom(*source);
  }
}

void CMsgICECandidate::MergeFrom(const CMsgICECandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICECandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candidate()) {
    _internal_set_candidate(from._internal_candidate());
  }
}

void CMsgICECandidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICECandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICECandidate::CopyFrom(const CMsgICECandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICECandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICECandidate::IsInitialized() const {
  return true;
}

void CMsgICECandidate::InternalSwap(CMsgICECandidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.Swap(&other->candidate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgICECandidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgICERendezvous_Auth::InitAsDefaultInstance() {
}
class CMsgICERendezvous_Auth::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgICERendezvous_Auth>()._has_bits_);
  static void set_has_pwd_frag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgICERendezvous_Auth::CMsgICERendezvous_Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgICERendezvous.Auth)
}
CMsgICERendezvous_Auth::CMsgICERendezvous_Auth(const CMsgICERendezvous_Auth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pwd_frag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pwd_frag()) {
    pwd_frag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pwd_frag(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICERendezvous.Auth)
}

void CMsgICERendezvous_Auth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto.base);
  pwd_frag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgICERendezvous_Auth::~CMsgICERendezvous_Auth() {
  // @@protoc_insertion_point(destructor:CMsgICERendezvous.Auth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgICERendezvous_Auth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pwd_frag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgICERendezvous_Auth::ArenaDtor(void* object) {
  CMsgICERendezvous_Auth* _this = reinterpret_cast< CMsgICERendezvous_Auth* >(object);
  (void)_this;
}
void CMsgICERendezvous_Auth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgICERendezvous_Auth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgICERendezvous_Auth& CMsgICERendezvous_Auth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgICERendezvous_Auth_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgICERendezvous_Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICERendezvous.Auth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pwd_frag_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgICERendezvous_Auth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pwd_frag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pwd_frag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgICERendezvous.Auth.pwd_frag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgICERendezvous_Auth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICERendezvous.Auth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pwd_frag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pwd_frag().data(), static_cast<int>(this->_internal_pwd_frag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgICERendezvous.Auth.pwd_frag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pwd_frag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICERendezvous.Auth)
  return target;
}

size_t CMsgICERendezvous_Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICERendezvous.Auth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pwd_frag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd_frag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgICERendezvous_Auth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICERendezvous.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICERendezvous_Auth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgICERendezvous_Auth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICERendezvous.Auth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICERendezvous.Auth)
    MergeFrom(*source);
  }
}

void CMsgICERendezvous_Auth::MergeFrom(const CMsgICERendezvous_Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICERendezvous.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pwd_frag()) {
    _internal_set_pwd_frag(from._internal_pwd_frag());
  }
}

void CMsgICERendezvous_Auth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICERendezvous.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICERendezvous_Auth::CopyFrom(const CMsgICERendezvous_Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICERendezvous.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICERendezvous_Auth::IsInitialized() const {
  return true;
}

void CMsgICERendezvous_Auth::InternalSwap(CMsgICERendezvous_Auth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pwd_frag_.Swap(&other->pwd_frag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgICERendezvous_Auth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgICERendezvous::InitAsDefaultInstance() {
  ::_CMsgICERendezvous_default_instance_._instance.get_mutable()->auth_ = const_cast< ::CMsgICERendezvous_Auth*>(
      ::CMsgICERendezvous_Auth::internal_default_instance());
  ::_CMsgICERendezvous_default_instance_._instance.get_mutable()->add_candidate_ = const_cast< ::CMsgICECandidate*>(
      ::CMsgICECandidate::internal_default_instance());
}
class CMsgICERendezvous::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgICERendezvous>()._has_bits_);
  static const ::CMsgICERendezvous_Auth& auth(const CMsgICERendezvous* msg);
  static void set_has_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgICECandidate& add_candidate(const CMsgICERendezvous* msg);
  static void set_has_add_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgICERendezvous_Auth&
CMsgICERendezvous::_Internal::auth(const CMsgICERendezvous* msg) {
  return *msg->auth_;
}
const ::CMsgICECandidate&
CMsgICERendezvous::_Internal::add_candidate(const CMsgICERendezvous* msg) {
  return *msg->add_candidate_;
}
CMsgICERendezvous::CMsgICERendezvous(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgICERendezvous)
}
CMsgICERendezvous::CMsgICERendezvous(const CMsgICERendezvous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_add_candidate()) {
    add_candidate_ = new ::CMsgICECandidate(*from.add_candidate_);
  } else {
    add_candidate_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::CMsgICERendezvous_Auth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgICERendezvous)
}

void CMsgICERendezvous::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto.base);
  ::memset(&add_candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&add_candidate_)) + sizeof(auth_));
}

CMsgICERendezvous::~CMsgICERendezvous() {
  // @@protoc_insertion_point(destructor:CMsgICERendezvous)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgICERendezvous::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete add_candidate_;
  if (this != internal_default_instance()) delete auth_;
}

void CMsgICERendezvous::ArenaDtor(void* object) {
  CMsgICERendezvous* _this = reinterpret_cast< CMsgICERendezvous* >(object);
  (void)_this;
}
void CMsgICERendezvous::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgICERendezvous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgICERendezvous& CMsgICERendezvous::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgICERendezvous_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgICERendezvous::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgICERendezvous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(add_candidate_ != nullptr);
      add_candidate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auth_ != nullptr);
      auth_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgICERendezvous::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgICECandidate add_candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_candidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgICERendezvous.Auth auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgICERendezvous::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgICERendezvous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICECandidate add_candidate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::add_candidate(this), target, stream);
  }

  // optional .CMsgICERendezvous.Auth auth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgICERendezvous)
  return target;
}

size_t CMsgICERendezvous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgICERendezvous)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgICECandidate add_candidate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_candidate_);
    }

    // optional .CMsgICERendezvous.Auth auth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auth_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgICERendezvous::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgICERendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgICERendezvous* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgICERendezvous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgICERendezvous)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgICERendezvous)
    MergeFrom(*source);
  }
}

void CMsgICERendezvous::MergeFrom(const CMsgICERendezvous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgICERendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_add_candidate()->::CMsgICECandidate::MergeFrom(from._internal_add_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_auth()->::CMsgICERendezvous_Auth::MergeFrom(from._internal_auth());
    }
  }
}

void CMsgICERendezvous::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgICERendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgICERendezvous::CopyFrom(const CMsgICERendezvous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgICERendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgICERendezvous::IsInitialized() const {
  return true;
}

void CMsgICERendezvous::InternalSwap(CMsgICERendezvous* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgICERendezvous, auth_)
      + sizeof(CMsgICERendezvous::auth_)
      - PROTOBUF_FIELD_OFFSET(CMsgICERendezvous, add_candidate_)>(
          reinterpret_cast<char*>(&add_candidate_),
          reinterpret_cast<char*>(&other->add_candidate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgICERendezvous::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
class CMsgSteamNetworkingP2PRendezvous_ConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous_ConnectRequest>()._has_bits_);
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_to_virtual_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_virtual_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_from_fakeip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamNetworkingP2PRendezvous_ConnectRequest::_Internal::crypt(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamNetworkingP2PRendezvous_ConnectRequest::_Internal::cert(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* msg) {
  return *msg->cert_;
}
void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CMsgSteamNetworkingP2PRendezvous_ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
}
CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CMsgSteamNetworkingP2PRendezvous_ConnectRequest(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_fakeip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_fakeip()) {
    from_fakeip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_fakeip(),
      GetArena());
  }
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  ::memcpy(&to_virtual_port_, &from.to_virtual_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_virtual_port_) -
    reinterpret_cast<char*>(&to_virtual_port_)) + sizeof(from_virtual_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto.base);
  from_fakeip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_virtual_port_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(from_virtual_port_));
}

CMsgSteamNetworkingP2PRendezvous_ConnectRequest::~CMsgSteamNetworkingP2PRendezvous_ConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_fakeip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous_ConnectRequest* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous_ConnectRequest* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& CMsgSteamNetworkingP2PRendezvous_ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectRequest_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_fakeip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&to_virtual_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_virtual_port_) -
        reinterpret_cast<char*>(&to_virtual_port_)) + sizeof(from_virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 to_virtual_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_to_virtual_port(&has_bits);
          to_virtual_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 from_virtual_port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_from_virtual_port(&has_bits);
          from_virtual_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_fakeip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_from_fakeip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamNetworkingP2PRendezvous.ConnectRequest.from_fakeip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::crypt(this), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cert(this), target, stream);
  }

  // optional uint32 to_virtual_port = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_to_virtual_port(), target);
  }

  // optional uint32 from_virtual_port = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_from_virtual_port(), target);
  }

  // optional string from_fakeip = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_fakeip().data(), static_cast<int>(this->_internal_from_fakeip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectRequest.from_fakeip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_from_fakeip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string from_fakeip = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_fakeip());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional uint32 to_virtual_port = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_to_virtual_port());
    }

    // optional uint32 from_virtual_port = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_from_virtual_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous_ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_fakeip(from._internal_from_fakeip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
    if (cached_has_bits & 0x00000008u) {
      to_virtual_port_ = from.to_virtual_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_virtual_port_ = from.from_virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectRequest::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_fakeip_.Swap(&other->from_fakeip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ConnectRequest, from_virtual_port_)
      + sizeof(CMsgSteamNetworkingP2PRendezvous_ConnectRequest::from_virtual_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ConnectRequest, crypt_)>(
          reinterpret_cast<char*>(&crypt_),
          reinterpret_cast<char*>(&other->crypt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_ConnectOK_default_instance_._instance.get_mutable()->cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(
      ::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
class CMsgSteamNetworkingP2PRendezvous_ConnectOK::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous_ConnectOK>()._has_bits_);
  static const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamNetworkingP2PRendezvous_ConnectOK* msg);
  static void set_has_crypt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamNetworkingP2PRendezvous_ConnectOK* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamNetworkingP2PRendezvous_ConnectOK::_Internal::crypt(const CMsgSteamNetworkingP2PRendezvous_ConnectOK* msg) {
  return *msg->crypt_;
}
const ::CMsgSteamDatagramCertificateSigned&
CMsgSteamNetworkingP2PRendezvous_ConnectOK::_Internal::cert(const CMsgSteamNetworkingP2PRendezvous_ConnectOK* msg) {
  return *msg->cert_;
}
void CMsgSteamNetworkingP2PRendezvous_ConnectOK::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CMsgSteamNetworkingP2PRendezvous_ConnectOK::CMsgSteamNetworkingP2PRendezvous_ConnectOK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
}
CMsgSteamNetworkingP2PRendezvous_ConnectOK::CMsgSteamNetworkingP2PRendezvous_ConnectOK(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crypt()) {
    crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from._internal_has_cert()) {
    cert_ = new ::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto.base);
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cert_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(cert_));
}

CMsgSteamNetworkingP2PRendezvous_ConnectOK::~CMsgSteamNetworkingP2PRendezvous_ConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous_ConnectOK* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous_ConnectOK* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous_ConnectOK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous_ConnectOK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous_ConnectOK& CMsgSteamNetworkingP2PRendezvous_ConnectOK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectOK_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous_ConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous_ConnectOK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramCertificateSigned cert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectOK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::crypt(this), target, stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectOK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous_ConnectOK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from._internal_crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from._internal_cert());
    }
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectOK::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectOK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ConnectOK, cert_)
      + sizeof(CMsgSteamNetworkingP2PRendezvous_ConnectOK::cert_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ConnectOK, crypt_)>(
          reinterpret_cast<char*>(&crypt_),
          reinterpret_cast<char*>(&other->crypt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectOK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous_ConnectionClosed>()._has_bits_);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
}
CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug()) {
    debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_debug(),
      GetArena());
  }
  reason_code_ = from.reason_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto.base);
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 0u;
}

CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::~CMsgSteamNetworkingP2PRendezvous_ConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  debug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    debug_.ClearNonDefaultToEmpty();
  }
  reason_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_debug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.debug");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reason_code(&has_bits);
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug().data(), static_cast<int>(this->_internal_debug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_debug(), target);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_reason_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string debug = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug());
    }

    // optional uint32 reason_code = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous_ConnectionClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_debug(from._internal_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_.Swap(&other->debug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reason_code_, other->reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_default_instance_._instance.get_mutable()->ice_ = const_cast< ::CMsgICERendezvous*>(
      ::CMsgICERendezvous::internal_default_instance());
}
class CMsgSteamNetworkingP2PRendezvous_ReliableMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous_ReliableMessage>()._has_bits_);
  static const ::CMsgICERendezvous& ice(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage* msg);
  static void set_has_ice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgICERendezvous&
CMsgSteamNetworkingP2PRendezvous_ReliableMessage::_Internal::ice(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage* msg) {
  return *msg->ice_;
}
CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CMsgSteamNetworkingP2PRendezvous_ReliableMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
}
CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CMsgSteamNetworkingP2PRendezvous_ReliableMessage(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ice()) {
    ice_ = new ::CMsgICERendezvous(*from.ice_);
  } else {
    ice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto.base);
  ice_ = nullptr;
}

CMsgSteamNetworkingP2PRendezvous_ReliableMessage::~CMsgSteamNetworkingP2PRendezvous_ReliableMessage() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ice_;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous_ReliableMessage* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous_ReliableMessage* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& CMsgSteamNetworkingP2PRendezvous_ReliableMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_ReliableMessage_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ice_ != nullptr);
    ice_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgICERendezvous ice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous_ReliableMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgICERendezvous ice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ReliableMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgICERendezvous ice = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ReliableMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous_ReliableMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ice()) {
    _internal_mutable_ice()->::CMsgICERendezvous::MergeFrom(from._internal_ice());
  }
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ReliableMessage::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ReliableMessage::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ReliableMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ice_, other->ice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous_ReliableMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous_ApplicationMessage>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
}
CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage(const CMsgSteamNetworkingP2PRendezvous_ApplicationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&msg_num_, &from.msg_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_idx_) -
    reinterpret_cast<char*>(&msg_num_)) + sizeof(lane_idx_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_idx_) -
      reinterpret_cast<char*>(&msg_num_)) + sizeof(lane_idx_));
}

CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::~CMsgSteamNetworkingP2PRendezvous_ApplicationMessage() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous_ApplicationMessage* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous_ApplicationMessage* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous_ApplicationMessage& CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_ApplicationMessage_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&msg_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_idx_) -
        reinterpret_cast<char*>(&msg_num_)) + sizeof(lane_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 msg_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_msg_num(&has_bits);
          msg_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane_idx(&has_bits);
          lane_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional uint64 msg_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_num(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 lane_idx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint64 msg_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_msg_num());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 lane_idx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous_ApplicationMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous_ApplicationMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::MergeFrom(const CMsgSteamNetworkingP2PRendezvous_ApplicationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_num_ = from.msg_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_idx_ = from.lane_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::CopyFrom(const CMsgSteamNetworkingP2PRendezvous_ApplicationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::InternalSwap(CMsgSteamNetworkingP2PRendezvous_ApplicationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, lane_idx_)
      + sizeof(CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::lane_idx_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous_ApplicationMessage, msg_num_)>(
          reinterpret_cast<char*>(&msg_num_),
          reinterpret_cast<char*>(&other->msg_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous_ApplicationMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingP2PRendezvous::InitAsDefaultInstance() {
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connect_request_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connect_ok_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectOK*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectOK::internal_default_instance());
  ::_CMsgSteamNetworkingP2PRendezvous_default_instance_._instance.get_mutable()->connection_closed_ = const_cast< ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed*>(
      ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::internal_default_instance());
}
class CMsgSteamNetworkingP2PRendezvous::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingP2PRendezvous>()._has_bits_);
  static void set_has_from_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_to_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_to_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sdr_routes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_peer_routes_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ice_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hosted_server_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest& connect_request(const CMsgSteamNetworkingP2PRendezvous* msg);
  static void set_has_connect_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgSteamNetworkingP2PRendezvous_ConnectOK& connect_ok(const CMsgSteamNetworkingP2PRendezvous* msg);
  static void set_has_connect_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed& connection_closed(const CMsgSteamNetworkingP2PRendezvous* msg);
  static void set_has_connection_closed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ack_reliable_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_first_reliable_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest&
CMsgSteamNetworkingP2PRendezvous::_Internal::connect_request(const CMsgSteamNetworkingP2PRendezvous* msg) {
  return *msg->connect_request_;
}
const ::CMsgSteamNetworkingP2PRendezvous_ConnectOK&
CMsgSteamNetworkingP2PRendezvous::_Internal::connect_ok(const CMsgSteamNetworkingP2PRendezvous* msg) {
  return *msg->connect_ok_;
}
const ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed&
CMsgSteamNetworkingP2PRendezvous::_Internal::connection_closed(const CMsgSteamNetworkingP2PRendezvous* msg) {
  return *msg->connection_closed_;
}
CMsgSteamNetworkingP2PRendezvous::CMsgSteamNetworkingP2PRendezvous(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reliable_messages_(arena),
  application_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PRendezvous)
}
CMsgSteamNetworkingP2PRendezvous::CMsgSteamNetworkingP2PRendezvous(const CMsgSteamNetworkingP2PRendezvous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reliable_messages_(from.reliable_messages_),
      application_messages_(from.application_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdr_routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdr_routes()) {
    sdr_routes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdr_routes(),
      GetArena());
  }
  from_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_identity()) {
    from_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_identity(),
      GetArena());
  }
  to_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_identity()) {
    to_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_identity(),
      GetArena());
  }
  hosted_server_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hosted_server_ticket()) {
    hosted_server_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hosted_server_ticket(),
      GetArena());
  }
  if (from._internal_has_connect_request()) {
    connect_request_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest(*from.connect_request_);
  } else {
    connect_request_ = nullptr;
  }
  if (from._internal_has_connect_ok()) {
    connect_ok_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectOK(*from.connect_ok_);
  } else {
    connect_ok_ = nullptr;
  }
  if (from._internal_has_connection_closed()) {
    connection_closed_ = new ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed(*from.connection_closed_);
  } else {
    connection_closed_ = nullptr;
  }
  ::memcpy(&to_connection_id_, &from.to_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_reliable_msg_) -
    reinterpret_cast<char*>(&to_connection_id_)) + sizeof(first_reliable_msg_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingP2PRendezvous)
}

void CMsgSteamNetworkingP2PRendezvous::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto.base);
  sdr_routes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hosted_server_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&connect_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_reliable_msg_) -
      reinterpret_cast<char*>(&connect_request_)) + sizeof(first_reliable_msg_));
}

CMsgSteamNetworkingP2PRendezvous::~CMsgSteamNetworkingP2PRendezvous() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PRendezvous)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingP2PRendezvous::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sdr_routes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hosted_server_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connect_request_;
  if (this != internal_default_instance()) delete connect_ok_;
  if (this != internal_default_instance()) delete connection_closed_;
}

void CMsgSteamNetworkingP2PRendezvous::ArenaDtor(void* object) {
  CMsgSteamNetworkingP2PRendezvous* _this = reinterpret_cast< CMsgSteamNetworkingP2PRendezvous* >(object);
  (void)_this;
}
void CMsgSteamNetworkingP2PRendezvous::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingP2PRendezvous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingP2PRendezvous& CMsgSteamNetworkingP2PRendezvous::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingP2PRendezvous_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingP2PRendezvous::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PRendezvous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reliable_messages_.Clear();
  application_messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      sdr_routes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      from_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      to_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hosted_server_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(connect_request_ != nullptr);
      connect_request_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(connect_ok_ != nullptr);
      connect_ok_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(connection_closed_ != nullptr);
      connection_closed_->Clear();
    }
  }
  to_connection_id_ = 0u;
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&ack_peer_routes_revision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_reliable_msg_) -
        reinterpret_cast<char*>(&ack_peer_routes_revision_)) + sizeof(first_reliable_msg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingP2PRendezvous::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 to_connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_to_connection_id(&has_bits);
          to_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes sdr_routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sdr_routes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_peer_routes_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ack_peer_routes_revision(&has_bits);
          ack_peer_routes_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect_ok(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_closed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ice_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ice_enabled(&has_bits);
          ice_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_identity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_from_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamNetworkingP2PRendezvous.from_identity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 from_connection_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_from_connection_id(&has_bits);
          from_connection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string to_identity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_to_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSteamNetworkingP2PRendezvous.to_identity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_reliable_msg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ack_reliable_msg(&has_bits);
          ack_reliable_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_reliable_msg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_first_reliable_msg(&has_bits);
          first_reliable_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reliable_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes hosted_server_ticket = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_hosted_server_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSteamNetworkingP2PRendezvous.ApplicationMessage application_messages = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_application_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingP2PRendezvous::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PRendezvous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 to_connection_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_to_connection_id(), target);
  }

  // optional bytes sdr_routes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sdr_routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ack_peer_routes_revision(), target);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connect_request(this), target, stream);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::connect_ok(this), target, stream);
  }

  // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::connection_closed(this), target, stream);
  }

  // optional bool ice_enabled = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ice_enabled(), target);
  }

  // optional string from_identity = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_identity().data(), static_cast<int>(this->_internal_from_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.from_identity");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_from_identity(), target);
  }

  // optional fixed32 from_connection_id = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_from_connection_id(), target);
  }

  // optional string to_identity = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_identity().data(), static_cast<int>(this->_internal_to_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingP2PRendezvous.to_identity");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_to_identity(), target);
  }

  // optional uint32 ack_reliable_msg = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ack_reliable_msg(), target);
  }

  // optional uint32 first_reliable_msg = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_first_reliable_msg(), target);
  }

  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reliable_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_reliable_messages(i), target, stream);
  }

  // optional bytes hosted_server_ticket = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_hosted_server_ticket(), target);
  }

  // repeated .CMsgSteamNetworkingP2PRendezvous.ApplicationMessage application_messages = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_application_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_application_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PRendezvous)
  return target;
}

size_t CMsgSteamNetworkingP2PRendezvous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PRendezvous)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamNetworkingP2PRendezvous.ReliableMessage reliable_messages = 13;
  total_size += 1UL * this->_internal_reliable_messages_size();
  for (const auto& msg : this->reliable_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSteamNetworkingP2PRendezvous.ApplicationMessage application_messages = 15;
  total_size += 1UL * this->_internal_application_messages_size();
  for (const auto& msg : this->application_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sdr_routes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sdr_routes());
    }

    // optional string from_identity = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_identity());
    }

    // optional string to_identity = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_identity());
    }

    // optional bytes hosted_server_ticket = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hosted_server_ticket());
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectRequest connect_request = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connect_request_);
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectOK connect_ok = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connect_ok_);
    }

    // optional .CMsgSteamNetworkingP2PRendezvous.ConnectionClosed connection_closed = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_closed_);
    }

    // optional fixed32 to_connection_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ack_peer_routes_revision = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_peer_routes_revision());
    }

    // optional bool ice_enabled = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional fixed32 from_connection_id = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 ack_reliable_msg = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_reliable_msg());
    }

    // optional uint32 first_reliable_msg = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_reliable_msg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingP2PRendezvous::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingP2PRendezvous* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingP2PRendezvous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingP2PRendezvous)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingP2PRendezvous)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingP2PRendezvous::MergeFrom(const CMsgSteamNetworkingP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reliable_messages_.MergeFrom(from.reliable_messages_);
  application_messages_.MergeFrom(from.application_messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sdr_routes(from._internal_sdr_routes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_from_identity(from._internal_from_identity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_to_identity(from._internal_to_identity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hosted_server_ticket(from._internal_hosted_server_ticket());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_connect_request()->::CMsgSteamNetworkingP2PRendezvous_ConnectRequest::MergeFrom(from._internal_connect_request());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_connect_ok()->::CMsgSteamNetworkingP2PRendezvous_ConnectOK::MergeFrom(from._internal_connect_ok());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_connection_closed()->::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed::MergeFrom(from._internal_connection_closed());
    }
    if (cached_has_bits & 0x00000080u) {
      to_connection_id_ = from.to_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000200u) {
      ice_enabled_ = from.ice_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      ack_reliable_msg_ = from.ack_reliable_msg_;
    }
    if (cached_has_bits & 0x00001000u) {
      first_reliable_msg_ = from.first_reliable_msg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingP2PRendezvous::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingP2PRendezvous::CopyFrom(const CMsgSteamNetworkingP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingP2PRendezvous::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingP2PRendezvous::InternalSwap(CMsgSteamNetworkingP2PRendezvous* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reliable_messages_.InternalSwap(&other->reliable_messages_);
  application_messages_.InternalSwap(&other->application_messages_);
  sdr_routes_.Swap(&other->sdr_routes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_identity_.Swap(&other->from_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_identity_.Swap(&other->to_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hosted_server_ticket_.Swap(&other->hosted_server_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous, first_reliable_msg_)
      + sizeof(CMsgSteamNetworkingP2PRendezvous::first_reliable_msg_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PRendezvous, connect_request_)>(
          reinterpret_cast<char*>(&connect_request_),
          reinterpret_cast<char*>(&other->connect_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingP2PRendezvous::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamNetworkingICESessionSummary::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingICESessionSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingICESessionSummary>()._has_bits_);
  static void set_has_failure_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_local_candidate_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_candidate_types(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_route_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_negotiation_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_best_route_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_best_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_best_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_selected_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ice_enable_var(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_local_candidate_types_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgSteamNetworkingICESessionSummary::CMsgSteamNetworkingICESessionSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingICESessionSummary)
}
CMsgSteamNetworkingICESessionSummary::CMsgSteamNetworkingICESessionSummary(const CMsgSteamNetworkingICESessionSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_candidate_types_, &from.local_candidate_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_score_) -
    reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(best_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingICESessionSummary)
}

void CMsgSteamNetworkingICESessionSummary::SharedCtor() {
  ::memset(&local_candidate_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_score_) -
      reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(best_score_));
}

CMsgSteamNetworkingICESessionSummary::~CMsgSteamNetworkingICESessionSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingICESessionSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSteamNetworkingICESessionSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSteamNetworkingICESessionSummary::ArenaDtor(void* object) {
  CMsgSteamNetworkingICESessionSummary* _this = reinterpret_cast< CMsgSteamNetworkingICESessionSummary* >(object);
  (void)_this;
}
void CMsgSteamNetworkingICESessionSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSteamNetworkingICESessionSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingICESessionSummary& CMsgSteamNetworkingICESessionSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingICESessionSummary_steamnetworkingsockets_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingICESessionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingICESessionSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&local_candidate_types_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_seconds_) -
        reinterpret_cast<char*>(&local_candidate_types_)) + sizeof(selected_seconds_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&user_settings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_score_) -
        reinterpret_cast<char*>(&user_settings_)) + sizeof(best_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingICESessionSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 local_candidate_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_local_candidate_types(&has_bits);
          local_candidate_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_candidate_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remote_candidate_types(&has_bits);
          remote_candidate_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_route_kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_initial_route_kind(&has_bits);
          initial_route_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_initial_ping(&has_bits);
          initial_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 negotiation_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_negotiation_ms(&has_bits);
          negotiation_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_initial_score(&has_bits);
          initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 failure_reason_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_failure_reason_code(&has_bits);
          failure_reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_seconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_selected_seconds(&has_bits);
          selected_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_settings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_user_settings(&has_bits);
          user_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ice_enable_var = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ice_enable_var(&has_bits);
          ice_enable_var_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_candidate_types_allowed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_local_candidate_types_allowed(&has_bits);
          local_candidate_types_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_route_kind = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_best_route_kind(&has_bits);
          best_route_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_ping = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_best_ping(&has_bits);
          best_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_best_score(&has_bits);
          best_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_best_time(&has_bits);
          best_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingICESessionSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingICESessionSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_candidate_types = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_candidate_types(), target);
  }

  // optional uint32 remote_candidate_types = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remote_candidate_types(), target);
  }

  // optional uint32 initial_route_kind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initial_route_kind(), target);
  }

  // optional uint32 initial_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_initial_ping(), target);
  }

  // optional uint32 negotiation_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_negotiation_ms(), target);
  }

  // optional uint32 initial_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_initial_score(), target);
  }

  // optional uint32 failure_reason_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_failure_reason_code(), target);
  }

  // optional uint32 selected_seconds = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_selected_seconds(), target);
  }

  // optional uint32 user_settings = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_user_settings(), target);
  }

  // optional uint32 ice_enable_var = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ice_enable_var(), target);
  }

  // optional uint32 local_candidate_types_allowed = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_local_candidate_types_allowed(), target);
  }

  // optional uint32 best_route_kind = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_best_route_kind(), target);
  }

  // optional uint32 best_ping = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_ping(), target);
  }

  // optional uint32 best_score = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_best_score(), target);
  }

  // optional uint32 best_time = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_best_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingICESessionSummary)
  return target;
}

size_t CMsgSteamNetworkingICESessionSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingICESessionSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 local_candidate_types = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_candidate_types());
    }

    // optional uint32 remote_candidate_types = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remote_candidate_types());
    }

    // optional uint32 initial_route_kind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_route_kind());
    }

    // optional uint32 initial_ping = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_ping());
    }

    // optional uint32 negotiation_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_negotiation_ms());
    }

    // optional uint32 initial_score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_score());
    }

    // optional uint32 failure_reason_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_failure_reason_code());
    }

    // optional uint32 selected_seconds = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_seconds());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 user_settings = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_settings());
    }

    // optional uint32 ice_enable_var = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ice_enable_var());
    }

    // optional uint32 local_candidate_types_allowed = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_candidate_types_allowed());
    }

    // optional uint32 best_route_kind = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_route_kind());
    }

    // optional uint32 best_time = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_time());
    }

    // optional uint32 best_ping = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_ping());
    }

    // optional uint32 best_score = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingICESessionSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingICESessionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingICESessionSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingICESessionSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingICESessionSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingICESessionSummary)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingICESessionSummary::MergeFrom(const CMsgSteamNetworkingICESessionSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingICESessionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      local_candidate_types_ = from.local_candidate_types_;
    }
    if (cached_has_bits & 0x00000002u) {
      remote_candidate_types_ = from.remote_candidate_types_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_route_kind_ = from.initial_route_kind_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ping_ = from.initial_ping_;
    }
    if (cached_has_bits & 0x00000010u) {
      negotiation_ms_ = from.negotiation_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_score_ = from.initial_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      failure_reason_code_ = from.failure_reason_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_seconds_ = from.selected_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      user_settings_ = from.user_settings_;
    }
    if (cached_has_bits & 0x00000200u) {
      ice_enable_var_ = from.ice_enable_var_;
    }
    if (cached_has_bits & 0x00000400u) {
      local_candidate_types_allowed_ = from.local_candidate_types_allowed_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_route_kind_ = from.best_route_kind_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_time_ = from.best_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      best_ping_ = from.best_ping_;
    }
    if (cached_has_bits & 0x00004000u) {
      best_score_ = from.best_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingICESessionSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingICESessionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingICESessionSummary::CopyFrom(const CMsgSteamNetworkingICESessionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingICESessionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingICESessionSummary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingICESessionSummary::InternalSwap(CMsgSteamNetworkingICESessionSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingICESessionSummary, best_score_)
      + sizeof(CMsgSteamNetworkingICESessionSummary::best_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingICESessionSummary, local_candidate_types_)>(
          reinterpret_cast<char*>(&local_candidate_types_),
          reinterpret_cast<char*>(&other->local_candidate_types_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingICESessionSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSessionCryptInfo* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSessionCryptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSessionCryptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramSessionCryptInfoSigned* Arena::CreateMaybeMessage< ::CMsgSteamDatagramSessionCryptInfoSigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramSessionCryptInfoSigned >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramDiagnostic* Arena::CreateMaybeMessage< ::CMsgSteamDatagramDiagnostic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramDiagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramLinkInstantaneousStats* Arena::CreateMaybeMessage< ::CMsgSteamDatagramLinkInstantaneousStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramLinkInstantaneousStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramLinkLifetimeStats* Arena::CreateMaybeMessage< ::CMsgSteamDatagramLinkLifetimeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramLinkLifetimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramConnectionQuality* Arena::CreateMaybeMessage< ::CMsgSteamDatagramConnectionQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramConnectionQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgICECandidate* Arena::CreateMaybeMessage< ::CMsgICECandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgICECandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgICERendezvous_Auth* Arena::CreateMaybeMessage< ::CMsgICERendezvous_Auth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgICERendezvous_Auth >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgICERendezvous* Arena::CreateMaybeMessage< ::CMsgICERendezvous >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgICERendezvous >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous_ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous_ConnectOK* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous_ConnectOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous_ConnectOK >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous_ConnectionClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous_ReliableMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous_ApplicationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingP2PRendezvous* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingP2PRendezvous >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingP2PRendezvous >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingICESessionSummary* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingICESessionSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingICESessionSummary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
